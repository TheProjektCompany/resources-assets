{"version":3,"sources":["intl-tel-input.js"],"names":["factory","module","exports","window","intlTelInput","undefined","allCountries","i","length","c","name","iso2","dialCode","priority","areaCodes","_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","_defineProperties","target","props","descriptor","arg","input","hint","prim","Symbol","toPrimitive","res","call","TypeError","String","Number","_toPrimitive","intlTelInputGlobals","getInstance","id","getAttribute","instances","documentReady","document","readyState","defaults","allowDropdown","autoInsertDialCode","autoPlaceholder","customContainer","customPlaceholder","dropdownContainer","excludeCountries","formatOnDisplay","geoIpLookup","hiddenInput","initialCountry","localizedCountries","nationalMode","onlyCountries","placeholderNumberType","preferredCountries","separateDialCode","showFlags","utilsScript","regionlessNanpNumbers","forEachProp","callback","keys","forEachInstance","method","Iti","options","_this","this","instance","Constructor","_classCallCheck","telInput","activeItem","highlightedItem","customOptions","hasOwnProperty","hadInitialPlaceholder","Boolean","protoProps","staticProps","_this2","forceShowFlags","isMobile","test","navigator","userAgent","body","classList","add","isRTL","closest","Promise","autoCountryPromise","resolve","reject","resolveAutoCountryPromise","rejectAutoCountryPromise","utilsScriptPromise","resolveUtilsScriptPromise","rejectUtilsScriptPromise","promise","all","selectedCountryData","_processCountryData","_generateMarkup","_setInitialState","_initListeners","_initRequests","_processAllCountries","_processCountryCodes","_processPreferredCountries","_translateCountriesByLocale","countries","sort","_countryNameSort","countryCode","countryCodeMaxLen","countryCodes","index","lowerCaseOnlyCountries","map","country","toLowerCase","filter","indexOf","lowerCaseExcludeCountries","iso","a","b","dialCodes","_addCountryCode","_i","_c","rootCountryCode","j","areaCode","k","partialDialCode","substr","countryData","_getCountryData","push","attrs","container","el","createElement","setAttribute","appendChild","hasAttribute","form","_this$options","parentClass","concat","wrapper","_createEl","class","parentNode","insertBefore","showFlagsContainer","flagsContainer","selectedFlag","arguments","source","ownKeys","getOwnPropertySymbols","apply","sym","getOwnPropertyDescriptor","forEach","_objectSpread","role","selectedFlagInner","disabled","selectedDialCode","dropdownArrow","countryList","_appendListItems","dropdown","hiddenInputName","lastIndexOf","type","className","preferred","tmp","idSuffix","insertAdjacentHTML","attributeValue","inputValue","val","charAt","_getDialCode","isRegionlessNanp","_isRegionlessNanp","_this$options2","_updateFlagFromNumber","_setFlag","defaultCountry","_updateValFromNumber","_initKeyListeners","_initBlurListeners","_initDropdownListeners","_initHiddenInputListener","_this3","_handleHiddenInputSubmit","getNumber","addEventListener","tagName","_this4","_handleLabelClick","e","contains","focus","preventDefault","label","_getClosestLabel","_handleClickSelectedFlag","readOnly","_showDropdown","_handleFlagsContainerKeydown","stopPropagation","_closeDropdown","_this5","intlTelInputUtils","loadUtils","_loadAutoCountry","autoCountry","handleAutoCountry","startedLoadingAutoCountry","setTimeout","_this6","_handleKeyupEvent","_triggerCountryChange","_handleClipboardEvent","number","max","_this7","_handleSubmitOrBlurEvent","_removeEmptyDialCode","numeric","_getNumeric","s","replace","createEvent","initEvent","dispatchEvent","remove","_setDropdownPosition","_highlightListItem","_scrollTo","_bindDropdownListeners","_trigger","shouldHaveClass","_this8","pos","getBoundingClientRect","windowTop","pageYOffset","documentElement","scrollTop","inputTop","top","dropdownHeight","offsetHeight","dropdownFitsBelow","innerHeight","dropdownFitsAbove","_toggleClass","extraTop","style","left","scrollLeft","_handleWindowScroll","_this9","_handleMouseoverCountryList","listItem","_getClosestListItem","_handleClickCountryList","_selectListItem","isOpening","_handleClickOffToClose","query","queryTimer","_handleKeydownOnDropdown","_handleUpDownKey","_handleEnterKey","clearTimeout","_searchForCountry","next","previousElementSibling","nextElementSibling","_startsWith","querySelector","originalNumber","useNational","_intlTelInputUtils$nu","numberFormat","NATIONAL","INTERNATIONAL","format","formatNumber","_beforeSetNumber","alreadySelected","shouldFocus","prevItem","ignoreOnlyCountriesOption","allowFail","Error","_this$options3","prevCountry","_setSelectedCountryFlagTitleAttribute","innerHTML","selectedFlagWidth","offsetWidth","_getHiddenSelectedFlagWidth","paddingRight","paddingLeft","_updatePlaceholder","nextItem","title","containerClone","cloneNode","visibility","flagsContainerClone","selectedFlagClone","width","removeChild","shouldSetPlaceholder","numberType","placeholder","getExampleNumber","flagChanged","_updateDialCode","len","setSelectionRange","removeAttribute","removeEventListener","element","middle","containerHeight","containerTop","containerBottom","elementHeight","elementTop","elementBottom","newScrollTop","middleOffset","heightDifference","newDialCodeBare","newNumber","inputVal","newDialCode","prevDialCode","includeAreaCode","numericChars","isNaN","parseInt","trim","numericVal","start","_cap","setCountry","getExtension","_getFullNumber","getNumberType","getValidationError","isValidNumber","isPossibleNumber","originalCountryCode","prototype","getCountryData","injectScript","path","handleSuccess","handleFailure","script","onload","onerror","async","src","startedLoadingUtilsScript","version","iti","_init","$","pluginName","Plugin","$el","extend","fn","init","on","phoneinput","attr","insertAfter","sync","destroy","removeData","getSelectedCountryData","args","each","data","Array","slice","inArray","getters","prop","jQuery"],"mappings":"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","file":"intl-tel-input.min.js","sourcesContent":["/*\n * International Telephone Input v18.2.1\n * https://github.com/jackocnr/intl-tel-input.git\n * Licensed under the MIT license\n */\n\n// wrap in UMD\n(function(factory) {\n    if (typeof module === \"object\" && module.exports) module.exports = factory(); else window.intlTelInput = factory();\n})(function(undefined) {\n    \"use strict\";\n    return function() {\n        // Array of country objects for the flag dropdown.\n        // Here is the criteria for the plugin to support a given country/territory\n        // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n        // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes\n        // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png\n        // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml\n        // Each country array has the following information:\n        // [\n        //    Country name,\n        //    iso2 code,\n        //    International dial code,\n        //    Order (if >1 country with same dial code),\n        //    Area codes\n        // ]\n        var allCountries = [ [ \"Afghanistan (‫افغانستان‬‎)\", \"af\", \"93\" ], [ \"Albania (Shqipëri)\", \"al\", \"355\" ], [ \"Algeria (‫الجزائر‬‎)\", \"dz\", \"213\" ], [ \"American Samoa\", \"as\", \"1\", 5, [ \"684\" ] ], [ \"Andorra\", \"ad\", \"376\" ], [ \"Angola\", \"ao\", \"244\" ], [ \"Anguilla\", \"ai\", \"1\", 6, [ \"264\" ] ], [ \"Antigua and Barbuda\", \"ag\", \"1\", 7, [ \"268\" ] ], [ \"Argentina\", \"ar\", \"54\" ], [ \"Armenia (Հայաստան)\", \"am\", \"374\" ], [ \"Aruba\", \"aw\", \"297\" ], [ \"Ascension Island\", \"ac\", \"247\" ], [ \"Australia\", \"au\", \"61\", 0 ], [ \"Austria (Österreich)\", \"at\", \"43\" ], [ \"Azerbaijan (Azərbaycan)\", \"az\", \"994\" ], [ \"Bahamas\", \"bs\", \"1\", 8, [ \"242\" ] ], [ \"Bahrain (‫البحرين‬‎)\", \"bh\", \"973\" ], [ \"Bangladesh (বাংলাদেশ)\", \"bd\", \"880\" ], [ \"Barbados\", \"bb\", \"1\", 9, [ \"246\" ] ], [ \"Belarus (Беларусь)\", \"by\", \"375\" ], [ \"Belgium (België)\", \"be\", \"32\" ], [ \"Belize\", \"bz\", \"501\" ], [ \"Benin (Bénin)\", \"bj\", \"229\" ], [ \"Bermuda\", \"bm\", \"1\", 10, [ \"441\" ] ], [ \"Bhutan (འབྲུག)\", \"bt\", \"975\" ], [ \"Bolivia\", \"bo\", \"591\" ], [ \"Bosnia and Herzegovina (Босна и Херцеговина)\", \"ba\", \"387\" ], [ \"Botswana\", \"bw\", \"267\" ], [ \"Brazil (Brasil)\", \"br\", \"55\" ], [ \"British Indian Ocean Territory\", \"io\", \"246\" ], [ \"British Virgin Islands\", \"vg\", \"1\", 11, [ \"284\" ] ], [ \"Brunei\", \"bn\", \"673\" ], [ \"Bulgaria (България)\", \"bg\", \"359\" ], [ \"Burkina Faso\", \"bf\", \"226\" ], [ \"Burundi (Uburundi)\", \"bi\", \"257\" ], [ \"Cambodia (កម្ពុជា)\", \"kh\", \"855\" ], [ \"Cameroon (Cameroun)\", \"cm\", \"237\" ], [ \"Canada\", \"ca\", \"1\", 1, [ \"204\", \"226\", \"236\", \"249\", \"250\", \"263\", \"289\", \"306\", \"343\", \"354\", \"365\", \"367\", \"368\", \"382\", \"387\", \"403\", \"416\", \"418\", \"428\", \"431\", \"437\", \"438\", \"450\", \"584\", \"468\", \"474\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"584\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"683\", \"705\", \"709\", \"742\", \"753\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"902\", \"905\" ] ], [ \"Cape Verde (Kabu Verdi)\", \"cv\", \"238\" ], [ \"Caribbean Netherlands\", \"bq\", \"599\", 1, [ \"3\", \"4\", \"7\" ] ], [ \"Cayman Islands\", \"ky\", \"1\", 12, [ \"345\" ] ], [ \"Central African Republic (République centrafricaine)\", \"cf\", \"236\" ], [ \"Chad (Tchad)\", \"td\", \"235\" ], [ \"Chile\", \"cl\", \"56\" ], [ \"China (中国)\", \"cn\", \"86\" ], [ \"Christmas Island\", \"cx\", \"61\", 2, [ \"89164\" ] ], [ \"Cocos (Keeling) Islands\", \"cc\", \"61\", 1, [ \"89162\" ] ], [ \"Colombia\", \"co\", \"57\" ], [ \"Comoros (‫جزر القمر‬‎)\", \"km\", \"269\" ], [ \"Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)\", \"cd\", \"243\" ], [ \"Congo (Republic) (Congo-Brazzaville)\", \"cg\", \"242\" ], [ \"Cook Islands\", \"ck\", \"682\" ], [ \"Costa Rica\", \"cr\", \"506\" ], [ \"Côte d’Ivoire\", \"ci\", \"225\" ], [ \"Croatia (Hrvatska)\", \"hr\", \"385\" ], [ \"Cuba\", \"cu\", \"53\" ], [ \"Curaçao\", \"cw\", \"599\", 0 ], [ \"Cyprus (Κύπρος)\", \"cy\", \"357\" ], [ \"Czech Republic (Česká republika)\", \"cz\", \"420\" ], [ \"Denmark (Danmark)\", \"dk\", \"45\" ], [ \"Djibouti\", \"dj\", \"253\" ], [ \"Dominica\", \"dm\", \"1\", 13, [ \"767\" ] ], [ \"Dominican Republic (República Dominicana)\", \"do\", \"1\", 2, [ \"809\", \"829\", \"849\" ] ], [ \"Ecuador\", \"ec\", \"593\" ], [ \"Egypt (‫مصر‬‎)\", \"eg\", \"20\" ], [ \"El Salvador\", \"sv\", \"503\" ], [ \"Equatorial Guinea (Guinea Ecuatorial)\", \"gq\", \"240\" ], [ \"Eritrea\", \"er\", \"291\" ], [ \"Estonia (Eesti)\", \"ee\", \"372\" ], [ \"Eswatini\", \"sz\", \"268\" ], [ \"Ethiopia\", \"et\", \"251\" ], [ \"Falkland Islands (Islas Malvinas)\", \"fk\", \"500\" ], [ \"Faroe Islands (Føroyar)\", \"fo\", \"298\" ], [ \"Fiji\", \"fj\", \"679\" ], [ \"Finland (Suomi)\", \"fi\", \"358\", 0 ], [ \"France\", \"fr\", \"33\" ], [ \"French Guiana (Guyane française)\", \"gf\", \"594\" ], [ \"French Polynesia (Polynésie française)\", \"pf\", \"689\" ], [ \"Gabon\", \"ga\", \"241\" ], [ \"Gambia\", \"gm\", \"220\" ], [ \"Georgia (საქართველო)\", \"ge\", \"995\" ], [ \"Germany (Deutschland)\", \"de\", \"49\" ], [ \"Ghana (Gaana)\", \"gh\", \"233\" ], [ \"Gibraltar\", \"gi\", \"350\" ], [ \"Greece (Ελλάδα)\", \"gr\", \"30\" ], [ \"Greenland (Kalaallit Nunaat)\", \"gl\", \"299\" ], [ \"Grenada\", \"gd\", \"1\", 14, [ \"473\" ] ], [ \"Guadeloupe\", \"gp\", \"590\", 0 ], [ \"Guam\", \"gu\", \"1\", 15, [ \"671\" ] ], [ \"Guatemala\", \"gt\", \"502\" ], [ \"Guernsey\", \"gg\", \"44\", 1, [ \"1481\", \"7781\", \"7839\", \"7911\" ] ], [ \"Guinea (Guinée)\", \"gn\", \"224\" ], [ \"Guinea-Bissau (Guiné Bissau)\", \"gw\", \"245\" ], [ \"Guyana\", \"gy\", \"592\" ], [ \"Haiti\", \"ht\", \"509\" ], [ \"Honduras\", \"hn\", \"504\" ], [ \"Hong Kong (香港)\", \"hk\", \"852\" ], [ \"Hungary (Magyarország)\", \"hu\", \"36\" ], [ \"Iceland (Ísland)\", \"is\", \"354\" ], [ \"India (भारत)\", \"in\", \"91\" ], [ \"Indonesia\", \"id\", \"62\" ], [ \"Iran (‫ایران‬‎)\", \"ir\", \"98\" ], [ \"Iraq (‫العراق‬‎)\", \"iq\", \"964\" ], [ \"Ireland\", \"ie\", \"353\" ], [ \"Isle of Man\", \"im\", \"44\", 2, [ \"1624\", \"74576\", \"7524\", \"7924\", \"7624\" ] ], [ \"Israel (‫ישראל‬‎)\", \"il\", \"972\" ], [ \"Italy (Italia)\", \"it\", \"39\", 0 ], [ \"Jamaica\", \"jm\", \"1\", 4, [ \"876\", \"658\" ] ], [ \"Japan (日本)\", \"jp\", \"81\" ], [ \"Jersey\", \"je\", \"44\", 3, [ \"1534\", \"7509\", \"7700\", \"7797\", \"7829\", \"7937\" ] ], [ \"Jordan (‫الأردن‬‎)\", \"jo\", \"962\" ], [ \"Kazakhstan (Казахстан)\", \"kz\", \"7\", 1, [ \"33\", \"7\" ] ], [ \"Kenya\", \"ke\", \"254\" ], [ \"Kiribati\", \"ki\", \"686\" ], [ \"Kosovo\", \"xk\", \"383\" ], [ \"Kuwait (‫الكويت‬‎)\", \"kw\", \"965\" ], [ \"Kyrgyzstan (Кыргызстан)\", \"kg\", \"996\" ], [ \"Laos (ລາວ)\", \"la\", \"856\" ], [ \"Latvia (Latvija)\", \"lv\", \"371\" ], [ \"Lebanon (‫لبنان‬‎)\", \"lb\", \"961\" ], [ \"Lesotho\", \"ls\", \"266\" ], [ \"Liberia\", \"lr\", \"231\" ], [ \"Libya (‫ليبيا‬‎)\", \"ly\", \"218\" ], [ \"Liechtenstein\", \"li\", \"423\" ], [ \"Lithuania (Lietuva)\", \"lt\", \"370\" ], [ \"Luxembourg\", \"lu\", \"352\" ], [ \"Macau (澳門)\", \"mo\", \"853\" ], [ \"Madagascar (Madagasikara)\", \"mg\", \"261\" ], [ \"Malawi\", \"mw\", \"265\" ], [ \"Malaysia\", \"my\", \"60\" ], [ \"Maldives\", \"mv\", \"960\" ], [ \"Mali\", \"ml\", \"223\" ], [ \"Malta\", \"mt\", \"356\" ], [ \"Marshall Islands\", \"mh\", \"692\" ], [ \"Martinique\", \"mq\", \"596\" ], [ \"Mauritania (‫موريتانيا‬‎)\", \"mr\", \"222\" ], [ \"Mauritius (Moris)\", \"mu\", \"230\" ], [ \"Mayotte\", \"yt\", \"262\", 1, [ \"269\", \"639\" ] ], [ \"Mexico (México)\", \"mx\", \"52\" ], [ \"Micronesia\", \"fm\", \"691\" ], [ \"Moldova (Republica Moldova)\", \"md\", \"373\" ], [ \"Monaco\", \"mc\", \"377\" ], [ \"Mongolia (Монгол)\", \"mn\", \"976\" ], [ \"Montenegro (Crna Gora)\", \"me\", \"382\" ], [ \"Montserrat\", \"ms\", \"1\", 16, [ \"664\" ] ], [ \"Morocco (‫المغرب‬‎)\", \"ma\", \"212\", 0 ], [ \"Mozambique (Moçambique)\", \"mz\", \"258\" ], [ \"Myanmar (Burma) (မြန်မာ)\", \"mm\", \"95\" ], [ \"Namibia (Namibië)\", \"na\", \"264\" ], [ \"Nauru\", \"nr\", \"674\" ], [ \"Nepal (नेपाल)\", \"np\", \"977\" ], [ \"Netherlands (Nederland)\", \"nl\", \"31\" ], [ \"New Caledonia (Nouvelle-Calédonie)\", \"nc\", \"687\" ], [ \"New Zealand\", \"nz\", \"64\" ], [ \"Nicaragua\", \"ni\", \"505\" ], [ \"Niger (Nijar)\", \"ne\", \"227\" ], [ \"Nigeria\", \"ng\", \"234\" ], [ \"Niue\", \"nu\", \"683\" ], [ \"Norfolk Island\", \"nf\", \"672\" ], [ \"North Korea (조선 민주주의 인민 공화국)\", \"kp\", \"850\" ], [ \"North Macedonia (Северна Македонија)\", \"mk\", \"389\" ], [ \"Northern Mariana Islands\", \"mp\", \"1\", 17, [ \"670\" ] ], [ \"Norway (Norge)\", \"no\", \"47\", 0 ], [ \"Oman (‫عُمان‬‎)\", \"om\", \"968\" ], [ \"Pakistan (‫پاکستان‬‎)\", \"pk\", \"92\" ], [ \"Palau\", \"pw\", \"680\" ], [ \"Palestine (‫فلسطين‬‎)\", \"ps\", \"970\" ], [ \"Panama (Panamá)\", \"pa\", \"507\" ], [ \"Papua New Guinea\", \"pg\", \"675\" ], [ \"Paraguay\", \"py\", \"595\" ], [ \"Peru (Perú)\", \"pe\", \"51\" ], [ \"Philippines\", \"ph\", \"63\" ], [ \"Poland (Polska)\", \"pl\", \"48\" ], [ \"Portugal\", \"pt\", \"351\" ], [ \"Puerto Rico\", \"pr\", \"1\", 3, [ \"787\", \"939\" ] ], [ \"Qatar (‫قطر‬‎)\", \"qa\", \"974\" ], [ \"Réunion (La Réunion)\", \"re\", \"262\", 0 ], [ \"Romania (România)\", \"ro\", \"40\" ], [ \"Russia (Россия)\", \"ru\", \"7\", 0 ], [ \"Rwanda\", \"rw\", \"250\" ], [ \"Saint Barthélemy\", \"bl\", \"590\", 1 ], [ \"Saint Helena\", \"sh\", \"290\" ], [ \"Saint Kitts and Nevis\", \"kn\", \"1\", 18, [ \"869\" ] ], [ \"Saint Lucia\", \"lc\", \"1\", 19, [ \"758\" ] ], [ \"Saint Martin (Saint-Martin (partie française))\", \"mf\", \"590\", 2 ], [ \"Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)\", \"pm\", \"508\" ], [ \"Saint Vincent and the Grenadines\", \"vc\", \"1\", 20, [ \"784\" ] ], [ \"Samoa\", \"ws\", \"685\" ], [ \"San Marino\", \"sm\", \"378\" ], [ \"São Tomé and Príncipe (São Tomé e Príncipe)\", \"st\", \"239\" ], [ \"Saudi Arabia (‫المملكة العربية السعودية‬‎)\", \"sa\", \"966\" ], [ \"Senegal (Sénégal)\", \"sn\", \"221\" ], [ \"Serbia (Србија)\", \"rs\", \"381\" ], [ \"Seychelles\", \"sc\", \"248\" ], [ \"Sierra Leone\", \"sl\", \"232\" ], [ \"Singapore\", \"sg\", \"65\" ], [ \"Sint Maarten\", \"sx\", \"1\", 21, [ \"721\" ] ], [ \"Slovakia (Slovensko)\", \"sk\", \"421\" ], [ \"Slovenia (Slovenija)\", \"si\", \"386\" ], [ \"Solomon Islands\", \"sb\", \"677\" ], [ \"Somalia (Soomaaliya)\", \"so\", \"252\" ], [ \"South Africa\", \"za\", \"27\" ], [ \"South Korea (대한민국)\", \"kr\", \"82\" ], [ \"South Sudan (‫جنوب السودان‬‎)\", \"ss\", \"211\" ], [ \"Spain (España)\", \"es\", \"34\" ], [ \"Sri Lanka (ශ්‍රී ලංකාව)\", \"lk\", \"94\" ], [ \"Sudan (‫السودان‬‎)\", \"sd\", \"249\" ], [ \"Suriname\", \"sr\", \"597\" ], [ \"Svalbard and Jan Mayen\", \"sj\", \"47\", 1, [ \"79\" ] ], [ \"Sweden (Sverige)\", \"se\", \"46\" ], [ \"Switzerland (Schweiz)\", \"ch\", \"41\" ], [ \"Syria (‫سوريا‬‎)\", \"sy\", \"963\" ], [ \"Taiwan (台灣)\", \"tw\", \"886\" ], [ \"Tajikistan\", \"tj\", \"992\" ], [ \"Tanzania\", \"tz\", \"255\" ], [ \"Thailand (ไทย)\", \"th\", \"66\" ], [ \"Timor-Leste\", \"tl\", \"670\" ], [ \"Togo\", \"tg\", \"228\" ], [ \"Tokelau\", \"tk\", \"690\" ], [ \"Tonga\", \"to\", \"676\" ], [ \"Trinidad and Tobago\", \"tt\", \"1\", 22, [ \"868\" ] ], [ \"Tunisia (‫تونس‬‎)\", \"tn\", \"216\" ], [ \"Turkey (Türkiye)\", \"tr\", \"90\" ], [ \"Turkmenistan\", \"tm\", \"993\" ], [ \"Turks and Caicos Islands\", \"tc\", \"1\", 23, [ \"649\" ] ], [ \"Tuvalu\", \"tv\", \"688\" ], [ \"U.S. Virgin Islands\", \"vi\", \"1\", 24, [ \"340\" ] ], [ \"Uganda\", \"ug\", \"256\" ], [ \"Ukraine (Україна)\", \"ua\", \"380\" ], [ \"United Arab Emirates (‫الإمارات العربية المتحدة‬‎)\", \"ae\", \"971\" ], [ \"United Kingdom\", \"gb\", \"44\", 0 ], [ \"United States\", \"us\", \"1\", 0 ], [ \"Uruguay\", \"uy\", \"598\" ], [ \"Uzbekistan (Oʻzbekiston)\", \"uz\", \"998\" ], [ \"Vanuatu\", \"vu\", \"678\" ], [ \"Vatican City (Città del Vaticano)\", \"va\", \"39\", 1, [ \"06698\" ] ], [ \"Venezuela\", \"ve\", \"58\" ], [ \"Vietnam (Việt Nam)\", \"vn\", \"84\" ], [ \"Wallis and Futuna (Wallis-et-Futuna)\", \"wf\", \"681\" ], [ \"Western Sahara (‫الصحراء الغربية‬‎)\", \"eh\", \"212\", 1, [ \"5288\", \"5289\" ] ], [ \"Yemen (‫اليمن‬‎)\", \"ye\", \"967\" ], [ \"Zambia\", \"zm\", \"260\" ], [ \"Zimbabwe\", \"zw\", \"263\" ], [ \"Åland Islands\", \"ax\", \"358\", 1, [ \"18\" ] ] ];\n        // loop over all of the countries above, restructuring the data to be objects with named keys\n        for (var i = 0; i < allCountries.length; i++) {\n            var c = allCountries[i];\n            allCountries[i] = {\n                name: c[0],\n                iso2: c[1],\n                dialCode: c[2],\n                priority: c[3] || 0,\n                areaCodes: c[4] || null\n            };\n        }\n        \"use strict\";\n        function _objectSpread(target) {\n            for (var i = 1; i < arguments.length; i++) {\n                var source = arguments[i] != null ? Object(arguments[i]) : {};\n                var ownKeys = Object.keys(source);\n                if (typeof Object.getOwnPropertySymbols === \"function\") {\n                    ownKeys.push.apply(ownKeys, Object.getOwnPropertySymbols(source).filter(function(sym) {\n                        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n                    }));\n                }\n                ownKeys.forEach(function(key) {\n                    _defineProperty(target, key, source[key]);\n                });\n            }\n            return target;\n        }\n        function _defineProperty(obj, key, value) {\n            key = _toPropertyKey(key);\n            if (key in obj) {\n                Object.defineProperty(obj, key, {\n                    value: value,\n                    enumerable: true,\n                    configurable: true,\n                    writable: true\n                });\n            } else {\n                obj[key] = value;\n            }\n            return obj;\n        }\n        function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n                throw new TypeError(\"Cannot call a class as a function\");\n            }\n        }\n        function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n            }\n        }\n        function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            Object.defineProperty(Constructor, \"prototype\", {\n                writable: false\n            });\n            return Constructor;\n        }\n        function _toPropertyKey(arg) {\n            var key = _toPrimitive(arg, \"string\");\n            return typeof key === \"symbol\" ? key : String(key);\n        }\n        function _toPrimitive(input, hint) {\n            if (typeof input !== \"object\" || input === null) return input;\n            var prim = input[Symbol.toPrimitive];\n            if (prim !== undefined) {\n                var res = prim.call(input, hint || \"default\");\n                if (typeof res !== \"object\") return res;\n                throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n            }\n            return (hint === \"string\" ? String : Number)(input);\n        }\n        var intlTelInputGlobals = {\n            getInstance: function getInstance(input) {\n                var id = input.getAttribute(\"data-intl-tel-input-id\");\n                return window.intlTelInputGlobals.instances[id];\n            },\n            instances: {},\n            // using a global like this allows us to mock it in the tests\n            documentReady: function documentReady() {\n                return document.readyState === \"complete\";\n            }\n        };\n        if (typeof window === \"object\") {\n            window.intlTelInputGlobals = intlTelInputGlobals;\n        }\n        // these vars persist through all instances of the plugin\n        var id = 0;\n        var defaults = {\n            // whether or not to allow the dropdown\n            allowDropdown: true,\n            // auto insert dial code (A) on init, (B) on user selecting a country, (C) on calling setCountry\n            // also listen for blur/submit and auto remove dial code if that's all there is\n            autoInsertDialCode: false,\n            // add a placeholder in the input with an example number for the selected country\n            autoPlaceholder: \"polite\",\n            // modify the parentClass\n            customContainer: \"\",\n            // modify the auto placeholder\n            customPlaceholder: null,\n            // append menu to specified element\n            dropdownContainer: null,\n            // don't display these countries\n            excludeCountries: [],\n            // format the input value during initialisation and on setNumber\n            formatOnDisplay: true,\n            // geoIp lookup function\n            geoIpLookup: null,\n            // inject a hidden input with this name, and on submit, populate it with the result of getNumber\n            hiddenInput: \"\",\n            // initial country\n            initialCountry: \"\",\n            // localized country names e.g. { 'de': 'Deutschland' }\n            localizedCountries: null,\n            // national vs international formatting for numbers e.g. placeholders and displaying existing numbers\n            nationalMode: true,\n            // display only these countries\n            onlyCountries: [],\n            // number type to use for placeholders\n            placeholderNumberType: \"MOBILE\",\n            // the countries at the top of the list. defaults to united states and united kingdom\n            preferredCountries: [ \"us\", \"gb\" ],\n            // display the country dial code next to the selected flag\n            separateDialCode: false,\n            // option to hide the flags - must be used with separateDialCode, or allowDropdown=false\n            showFlags: true,\n            // specify the path to the libphonenumber script to enable validation/formatting\n            utilsScript: \"\"\n        };\n        // https://en.wikipedia.org/wiki/List_of_North_American_Numbering_Plan_area_codes#Non-geographic_area_codes\n        var regionlessNanpNumbers = [ \"800\", \"822\", \"833\", \"844\", \"855\", \"866\", \"877\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\" ];\n        // utility function to iterate over an object. can't use Object.entries or native forEach because\n        // of IE11\n        var forEachProp = function forEachProp(obj, callback) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                callback(keys[i], obj[keys[i]]);\n            }\n        };\n        // run a method on each instance of the plugin\n        var forEachInstance = function forEachInstance(method) {\n            forEachProp(window.intlTelInputGlobals.instances, function(key) {\n                window.intlTelInputGlobals.instances[key][method]();\n            });\n        };\n        // this is our plugin class that we will create an instance of\n        // eslint-disable-next-line no-unused-vars\n        var Iti = /*#__PURE__*/ function() {\n            function Iti(input, options) {\n                var _this = this;\n                _classCallCheck(this, Iti);\n                this.id = id++;\n                this.telInput = input;\n                this.activeItem = null;\n                this.highlightedItem = null;\n                // process specified options / defaults\n                // alternative to Object.assign, which isn't supported by IE11\n                var customOptions = options || {};\n                this.options = {};\n                forEachProp(defaults, function(key, value) {\n                    _this.options[key] = customOptions.hasOwnProperty(key) ? customOptions[key] : value;\n                });\n                this.hadInitialPlaceholder = Boolean(input.getAttribute(\"placeholder\"));\n            }\n            _createClass(Iti, [ {\n                key: \"_init\",\n                value: function _init() {\n                    var _this2 = this;\n                    // if in nationalMode, do not insert dial codes\n                    if (this.options.nationalMode) {\n                        this.options.autoInsertDialCode = false;\n                    }\n                    // if separateDialCode enabled, do not insert dial codes\n                    if (this.options.separateDialCode) {\n                        this.options.autoInsertDialCode = false;\n                    }\n                    // force showFlags=true if there's a dropdown and we're not displaying the dial code,\n                    // as otherwise you just have a down arrow on it's own which doesn't make sense\n                    var forceShowFlags = this.options.allowDropdown && !this.options.separateDialCode;\n                    if (!this.options.showFlags && forceShowFlags) {\n                        this.options.showFlags = true;\n                    }\n                    // we cannot just test screen size as some smartphones/website meta tags will report desktop\n                    // resolutions\n                    // Note: for some reason jasmine breaks if you put this in the main Plugin function with the\n                    // rest of these declarations\n                    // Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'\n                    this.isMobile = /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n                    if (this.isMobile) {\n                        // trigger the mobile dropdown css\n                        document.body.classList.add(\"iti-mobile\");\n                        // on mobile, we want a full screen dropdown, so we must append it to the body\n                        if (!this.options.dropdownContainer) {\n                            this.options.dropdownContainer = document.body;\n                        }\n                    }\n                    // check if input has one parent with RTL\n                    this.isRTL = !!this.telInput.closest(\"[dir=rtl]\");\n                    // these promises get resolved when their individual requests complete\n                    // this way the dev can do something like iti.promise.then(...) to know when all requests are\n                    // complete\n                    if (typeof Promise !== \"undefined\") {\n                        var autoCountryPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveAutoCountryPromise = resolve;\n                            _this2.rejectAutoCountryPromise = reject;\n                        });\n                        var utilsScriptPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveUtilsScriptPromise = resolve;\n                            _this2.rejectUtilsScriptPromise = reject;\n                        });\n                        this.promise = Promise.all([ autoCountryPromise, utilsScriptPromise ]);\n                    } else {\n                        // prevent errors when Promise doesn't exist\n                        this.resolveAutoCountryPromise = this.rejectAutoCountryPromise = function() {};\n                        this.resolveUtilsScriptPromise = this.rejectUtilsScriptPromise = function() {};\n                    }\n                    // in various situations there could be no country selected initially, but we need to be able\n                    // to assume this variable exists\n                    this.selectedCountryData = {};\n                    // process all the data: onlyCountries, excludeCountries, preferredCountries etc\n                    this._processCountryData();\n                    // generate the markup\n                    this._generateMarkup();\n                    // set the initial state of the input value and the selected flag\n                    this._setInitialState();\n                    // start all of the event listeners: autoInsertDialCode, input keydown, selectedFlag click\n                    this._initListeners();\n                    // utils script, and auto country\n                    this._initRequests();\n                }\n            }, {\n                key: \"_processCountryData\",\n                value: function _processCountryData() {\n                    // process onlyCountries or excludeCountries array if present\n                    this._processAllCountries();\n                    // process the countryCodes map\n                    this._processCountryCodes();\n                    // process the preferredCountries\n                    this._processPreferredCountries();\n                    // translate countries according to localizedCountries option\n                    if (this.options.localizedCountries) {\n                        this._translateCountriesByLocale();\n                    }\n                    // sort countries by name\n                    if (this.options.onlyCountries.length || this.options.localizedCountries) {\n                        this.countries.sort(this._countryNameSort);\n                    }\n                }\n            }, {\n                key: \"_addCountryCode\",\n                value: function _addCountryCode(iso2, countryCode, priority) {\n                    if (countryCode.length > this.countryCodeMaxLen) {\n                        this.countryCodeMaxLen = countryCode.length;\n                    }\n                    if (!this.countryCodes.hasOwnProperty(countryCode)) {\n                        this.countryCodes[countryCode] = [];\n                    }\n                    // bail if we already have this country for this countryCode\n                    for (var i = 0; i < this.countryCodes[countryCode].length; i++) {\n                        if (this.countryCodes[countryCode][i] === iso2) {\n                            return;\n                        }\n                    }\n                    // check for undefined as 0 is falsy\n                    var index = priority !== undefined ? priority : this.countryCodes[countryCode].length;\n                    this.countryCodes[countryCode][index] = iso2;\n                }\n            }, {\n                key: \"_processAllCountries\",\n                value: function _processAllCountries() {\n                    if (this.options.onlyCountries.length) {\n                        var lowerCaseOnlyCountries = this.options.onlyCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseOnlyCountries.indexOf(country.iso2) > -1;\n                        });\n                    } else if (this.options.excludeCountries.length) {\n                        var lowerCaseExcludeCountries = this.options.excludeCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseExcludeCountries.indexOf(country.iso2) === -1;\n                        });\n                    } else {\n                        this.countries = allCountries;\n                    }\n                }\n            }, {\n                key: \"_translateCountriesByLocale\",\n                value: function _translateCountriesByLocale() {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var iso = this.countries[i].iso2.toLowerCase();\n                        if (this.options.localizedCountries.hasOwnProperty(iso)) {\n                            this.countries[i].name = this.options.localizedCountries[iso];\n                        }\n                    }\n                }\n            }, {\n                key: \"_countryNameSort\",\n                value: function _countryNameSort(a, b) {\n                    if (a.name < b.name) {\n                        return -1;\n                    }\n                    if (a.name > b.name) {\n                        return 1;\n                    }\n                    return 0;\n                }\n            }, {\n                key: \"_processCountryCodes\",\n                value: function _processCountryCodes() {\n                    this.countryCodeMaxLen = 0;\n                    // here we store just dial codes\n                    this.dialCodes = {};\n                    // here we store \"country codes\" (both dial codes and their area codes)\n                    this.countryCodes = {};\n                    // first: add dial codes\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var c = this.countries[i];\n                        if (!this.dialCodes[c.dialCode]) {\n                            this.dialCodes[c.dialCode] = true;\n                        }\n                        this._addCountryCode(c.iso2, c.dialCode, c.priority);\n                    }\n                    // next: add area codes\n                    // this is a second loop over countries, to make sure we have all of the \"root\" countries\n                    // already in the map, so that we can access them, as each time we add an area code substring\n                    // to the map, we also need to include the \"root\" country's code, as that also matches\n                    for (var _i = 0; _i < this.countries.length; _i++) {\n                        var _c = this.countries[_i];\n                        // area codes\n                        if (_c.areaCodes) {\n                            var rootCountryCode = this.countryCodes[_c.dialCode][0];\n                            // for each area code\n                            for (var j = 0; j < _c.areaCodes.length; j++) {\n                                var areaCode = _c.areaCodes[j];\n                                // for each digit in the area code to add all partial matches as well\n                                for (var k = 1; k < areaCode.length; k++) {\n                                    var partialDialCode = _c.dialCode + areaCode.substr(0, k);\n                                    // start with the root country, as that also matches this dial code\n                                    this._addCountryCode(rootCountryCode, partialDialCode);\n                                    this._addCountryCode(_c.iso2, partialDialCode);\n                                }\n                                // add the full area code\n                                this._addCountryCode(_c.iso2, _c.dialCode + areaCode);\n                            }\n                        }\n                    }\n                }\n            }, {\n                key: \"_processPreferredCountries\",\n                value: function _processPreferredCountries() {\n                    this.preferredCountries = [];\n                    for (var i = 0; i < this.options.preferredCountries.length; i++) {\n                        var countryCode = this.options.preferredCountries[i].toLowerCase();\n                        var countryData = this._getCountryData(countryCode, false, true);\n                        if (countryData) {\n                            this.preferredCountries.push(countryData);\n                        }\n                    }\n                }\n            }, {\n                key: \"_createEl\",\n                value: function _createEl(name, attrs, container) {\n                    var el = document.createElement(name);\n                    if (attrs) {\n                        forEachProp(attrs, function(key, value) {\n                            return el.setAttribute(key, value);\n                        });\n                    }\n                    if (container) {\n                        container.appendChild(el);\n                    }\n                    return el;\n                }\n            }, {\n                key: \"_generateMarkup\",\n                value: function _generateMarkup() {\n                    // if autocomplete does not exist on the element and its form, then\n                    // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can\n                    // easily put the plugin in an inconsistent state e.g. the wrong flag selected for the\n                    // autocompleted number, which on submit could mean wrong number is saved\n                    if (!this.telInput.hasAttribute(\"autocomplete\") && !(this.telInput.form && this.telInput.form.hasAttribute(\"autocomplete\"))) {\n                        this.telInput.setAttribute(\"autocomplete\", \"off\");\n                    }\n                    var _this$options = this.options, allowDropdown = _this$options.allowDropdown, separateDialCode = _this$options.separateDialCode, showFlags = _this$options.showFlags, customContainer = _this$options.customContainer, hiddenInput = _this$options.hiddenInput, dropdownContainer = _this$options.dropdownContainer;\n                    // containers (mostly for positioning)\n                    var parentClass = \"iti\";\n                    if (allowDropdown) {\n                        parentClass += \" iti--allow-dropdown\";\n                    }\n                    if (separateDialCode) {\n                        parentClass += \" iti--separate-dial-code\";\n                    }\n                    if (showFlags) {\n                        parentClass += \" iti--show-flags\";\n                    }\n                    if (customContainer) {\n                        parentClass += \" \".concat(customContainer);\n                    }\n                    var wrapper = this._createEl(\"div\", {\n                        \"class\": parentClass\n                    });\n                    this.telInput.parentNode.insertBefore(wrapper, this.telInput);\n                    // only hide the flagsContainer if allowDropdown, showFlags and separateDialCode are all false\n                    var showFlagsContainer = allowDropdown || showFlags || separateDialCode;\n                    if (showFlagsContainer) {\n                        this.flagsContainer = this._createEl(\"div\", {\n                            \"class\": \"iti__flag-container\"\n                        }, wrapper);\n                    }\n                    wrapper.appendChild(this.telInput);\n                    // selected flag (displayed to left of input)\n                    // using Aria tags for \"Select-Only Combobox Example\"\n                    // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/\n                    if (showFlagsContainer) {\n                        this.selectedFlag = this._createEl(\"div\", _objectSpread({\n                            \"class\": \"iti__selected-flag\"\n                        }, allowDropdown && {\n                            role: \"combobox\",\n                            \"aria-haspopup\": \"listbox\",\n                            \"aria-controls\": \"iti-\".concat(this.id, \"__country-listbox\"),\n                            \"aria-expanded\": \"false\",\n                            \"aria-label\": \"Telephone country code\"\n                        }), this.flagsContainer);\n                    }\n                    if (showFlags) {\n                        this.selectedFlagInner = this._createEl(\"div\", {\n                            \"class\": \"iti__flag\"\n                        }, this.selectedFlag);\n                    }\n                    if (this.selectedFlag && this.telInput.disabled) {\n                        this.selectedFlag.setAttribute(\"aria-disabled\", \"true\");\n                    }\n                    if (separateDialCode) {\n                        this.selectedDialCode = this._createEl(\"div\", {\n                            \"class\": \"iti__selected-dial-code\"\n                        }, this.selectedFlag);\n                    }\n                    if (allowDropdown) {\n                        if (!this.telInput.disabled) {\n                            // make element focusable and tab navigable\n                            this.selectedFlag.setAttribute(\"tabindex\", \"0\");\n                        }\n                        this.dropdownArrow = this._createEl(\"div\", {\n                            \"class\": \"iti__arrow\"\n                        }, this.selectedFlag);\n                        // country dropdown: preferred countries, then divider, then all countries\n                        this.countryList = this._createEl(\"ul\", {\n                            \"class\": \"iti__country-list iti__hide\",\n                            id: \"iti-\".concat(this.id, \"__country-listbox\"),\n                            role: \"listbox\",\n                            \"aria-label\": \"List of countries\"\n                        });\n                        if (this.preferredCountries.length) {\n                            this._appendListItems(this.preferredCountries, \"iti__preferred\", true);\n                            this._createEl(\"li\", {\n                                \"class\": \"iti__divider\",\n                                role: \"separator\",\n                                \"aria-disabled\": \"true\"\n                            }, this.countryList);\n                        }\n                        this._appendListItems(this.countries, \"iti__standard\");\n                        // create dropdownContainer markup\n                        if (dropdownContainer) {\n                            this.dropdown = this._createEl(\"div\", {\n                                \"class\": \"iti iti--container\"\n                            });\n                            this.dropdown.appendChild(this.countryList);\n                        } else {\n                            this.flagsContainer.appendChild(this.countryList);\n                        }\n                    }\n                    if (hiddenInput) {\n                        var hiddenInputName = hiddenInput;\n                        var name = this.telInput.getAttribute(\"name\");\n                        if (name) {\n                            var i = name.lastIndexOf(\"[\");\n                            // if input name contains square brackets, then give the hidden input the same name,\n                            // replacing the contents of the last set of brackets with the given hiddenInput name\n                            if (i !== -1) {\n                                hiddenInputName = \"\".concat(name.substr(0, i), \"[\").concat(hiddenInputName, \"]\");\n                            }\n                        }\n                        this.hiddenInput = this._createEl(\"input\", {\n                            type: \"hidden\",\n                            name: hiddenInputName\n                        });\n                        wrapper.appendChild(this.hiddenInput);\n                    }\n                }\n            }, {\n                key: \"_appendListItems\",\n                value: function _appendListItems(countries, className, preferred) {\n                    // we create so many DOM elements, it is faster to build a temp string\n                    // and then add everything to the DOM in one go at the end\n                    var tmp = \"\";\n                    // for each country\n                    for (var i = 0; i < countries.length; i++) {\n                        var c = countries[i];\n                        var idSuffix = preferred ? \"-preferred\" : \"\";\n                        // open the list item\n                        tmp += \"<li class='iti__country \".concat(className, \"' tabIndex='-1' id='iti-\").concat(this.id, \"__item-\").concat(c.iso2).concat(idSuffix, \"' role='option' data-dial-code='\").concat(c.dialCode, \"' data-country-code='\").concat(c.iso2, \"' aria-selected='false'>\");\n                        // add the flag\n                        if (this.options.showFlags) {\n                            tmp += \"<div class='iti__flag-box'><div class='iti__flag iti__\".concat(c.iso2, \"'></div></div>\");\n                        }\n                        // and the country name and dial code\n                        tmp += \"<span class='iti__country-name'>\".concat(c.name, \"</span>\");\n                        tmp += \"<span class='iti__dial-code'>+\".concat(c.dialCode, \"</span>\");\n                        // close the list item\n                        tmp += \"</li>\";\n                    }\n                    this.countryList.insertAdjacentHTML(\"beforeend\", tmp);\n                }\n            }, {\n                key: \"_setInitialState\",\n                value: function _setInitialState() {\n                    // fix firefox bug: when first load page (with input with value set to number with intl dial\n                    // code) and initialising plugin removes the dial code from the input, then refresh page,\n                    // and we try to init plugin again but this time on number without dial code so get grey flag\n                    var attributeValue = this.telInput.getAttribute(\"value\");\n                    var inputValue = this.telInput.value;\n                    var useAttribute = attributeValue && attributeValue.charAt(0) === \"+\" && (!inputValue || inputValue.charAt(0) !== \"+\");\n                    var val = useAttribute ? attributeValue : inputValue;\n                    var dialCode = this._getDialCode(val);\n                    var isRegionlessNanp = this._isRegionlessNanp(val);\n                    var _this$options2 = this.options, initialCountry = _this$options2.initialCountry, autoInsertDialCode = _this$options2.autoInsertDialCode;\n                    // if we already have a dial code, and it's not a regionlessNanp, we can go ahead and set the\n                    // flag, else fall back to the default country\n                    if (dialCode && !isRegionlessNanp) {\n                        this._updateFlagFromNumber(val);\n                    } else if (initialCountry !== \"auto\") {\n                        // see if we should select a flag\n                        if (initialCountry) {\n                            this._setFlag(initialCountry.toLowerCase());\n                        } else {\n                            if (dialCode && isRegionlessNanp) {\n                                // has intl dial code, is regionless nanp, and no initialCountry, so default to US\n                                this._setFlag(\"us\");\n                            } else {\n                                // no dial code and no initialCountry, so default to first in list\n                                this.defaultCountry = this.preferredCountries.length ? this.preferredCountries[0].iso2 : this.countries[0].iso2;\n                                if (!val) {\n                                    this._setFlag(this.defaultCountry);\n                                }\n                            }\n                        }\n                        // if empty and autoInsertDialCode then insert the dial code\n                        if (!val && autoInsertDialCode) {\n                            this.telInput.value = \"+\".concat(this.selectedCountryData.dialCode);\n                        }\n                    }\n                    // NOTE: if initialCountry is set to auto, that will be handled separately\n                    // format - note this wont be run after _updateDialCode as that's only called if no val\n                    if (val) {\n                        this._updateValFromNumber(val);\n                    }\n                }\n            }, {\n                key: \"_initListeners\",\n                value: function _initListeners() {\n                    this._initKeyListeners();\n                    if (this.options.autoInsertDialCode) {\n                        this._initBlurListeners();\n                    }\n                    if (this.options.allowDropdown) {\n                        this._initDropdownListeners();\n                    }\n                    if (this.hiddenInput) {\n                        this._initHiddenInputListener();\n                    }\n                }\n            }, {\n                key: \"_initHiddenInputListener\",\n                value: function _initHiddenInputListener() {\n                    var _this3 = this;\n                    this._handleHiddenInputSubmit = function() {\n                        _this3.hiddenInput.value = _this3.getNumber();\n                    };\n                    if (this.telInput.form) {\n                        this.telInput.form.addEventListener(\"submit\", this._handleHiddenInputSubmit);\n                    }\n                }\n            }, {\n                key: \"_getClosestLabel\",\n                value: function _getClosestLabel() {\n                    var el = this.telInput;\n                    while (el && el.tagName !== \"LABEL\") {\n                        el = el.parentNode;\n                    }\n                    return el;\n                }\n            }, {\n                key: \"_initDropdownListeners\",\n                value: function _initDropdownListeners() {\n                    var _this4 = this;\n                    // hack for input nested inside label (which is valid markup): clicking the selected-flag to\n                    // open the dropdown would then automatically trigger a 2nd click on the input which would\n                    // close it again\n                    this._handleLabelClick = function(e) {\n                        // if the dropdown is closed, then focus the input, else ignore the click\n                        if (_this4.countryList.classList.contains(\"iti__hide\")) {\n                            _this4.telInput.focus();\n                        } else {\n                            e.preventDefault();\n                        }\n                    };\n                    var label = this._getClosestLabel();\n                    if (label) {\n                        label.addEventListener(\"click\", this._handleLabelClick);\n                    }\n                    // toggle country dropdown on click\n                    this._handleClickSelectedFlag = function() {\n                        // only intercept this event if we're opening the dropdown\n                        // else let it bubble up to the top (\"click-off-to-close\" listener)\n                        // we cannot just stopPropagation as it may be needed to close another instance\n                        if (_this4.countryList.classList.contains(\"iti__hide\") && !_this4.telInput.disabled && !_this4.telInput.readOnly) {\n                            _this4._showDropdown();\n                        }\n                    };\n                    this.selectedFlag.addEventListener(\"click\", this._handleClickSelectedFlag);\n                    // open dropdown list if currently focused\n                    this._handleFlagsContainerKeydown = function(e) {\n                        var isDropdownHidden = _this4.countryList.classList.contains(\"iti__hide\");\n                        if (isDropdownHidden && [ \"ArrowUp\", \"Up\", \"ArrowDown\", \"Down\", \" \", \"Enter\" ].indexOf(e.key) !== -1) {\n                            // prevent form from being submitted if \"ENTER\" was pressed\n                            e.preventDefault();\n                            // prevent event from being handled again by document\n                            e.stopPropagation();\n                            _this4._showDropdown();\n                        }\n                        // allow navigation from dropdown to input on TAB\n                        if (e.key === \"Tab\") {\n                            _this4._closeDropdown();\n                        }\n                    };\n                    this.flagsContainer.addEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                }\n            }, {\n                key: \"_initRequests\",\n                value: function _initRequests() {\n                    var _this5 = this;\n                    // if the user has specified the path to the utils script, fetch it on window.load, else resolve\n                    if (this.options.utilsScript && !window.intlTelInputUtils) {\n                        // if the plugin is being initialised after the window.load event has already been fired\n                        if (window.intlTelInputGlobals.documentReady()) {\n                            window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n                        } else {\n                            // wait until the load event so we don't block any other requests e.g. the flags image\n                            window.addEventListener(\"load\", function() {\n                                window.intlTelInputGlobals.loadUtils(_this5.options.utilsScript);\n                            });\n                        }\n                    } else {\n                        this.resolveUtilsScriptPromise();\n                    }\n                    if (this.options.initialCountry === \"auto\") {\n                        this._loadAutoCountry();\n                    } else {\n                        this.resolveAutoCountryPromise();\n                    }\n                }\n            }, {\n                key: \"_loadAutoCountry\",\n                value: function _loadAutoCountry() {\n                    // 3 options:\n                    // 1) already loaded (we're done)\n                    // 2) not already started loading (start)\n                    // 3) already started loading (do nothing - just wait for loading callback to fire)\n                    if (window.intlTelInputGlobals.autoCountry) {\n                        this.handleAutoCountry();\n                    } else if (!window.intlTelInputGlobals.startedLoadingAutoCountry) {\n                        // don't do this twice!\n                        window.intlTelInputGlobals.startedLoadingAutoCountry = true;\n                        if (typeof this.options.geoIpLookup === \"function\") {\n                            this.options.geoIpLookup(function(countryCode) {\n                                window.intlTelInputGlobals.autoCountry = countryCode.toLowerCase();\n                                // tell all instances the auto country is ready\n                                // TODO: this should just be the current instances\n                                // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight\n                                // away (e.g. if they have already done the geo ip lookup somewhere else). Using\n                                // setTimeout means that the current thread of execution will finish before executing\n                                // this, which allows the plugin to finish initialising.\n                                setTimeout(function() {\n                                    return forEachInstance(\"handleAutoCountry\");\n                                });\n                            }, function() {\n                                return forEachInstance(\"rejectAutoCountryPromise\");\n                            });\n                        }\n                    }\n                }\n            }, {\n                key: \"_initKeyListeners\",\n                value: function _initKeyListeners() {\n                    var _this6 = this;\n                    // update flag on keyup\n                    this._handleKeyupEvent = function() {\n                        if (_this6._updateFlagFromNumber(_this6.telInput.value)) {\n                            _this6._triggerCountryChange();\n                        }\n                    };\n                    this.telInput.addEventListener(\"keyup\", this._handleKeyupEvent);\n                    // update flag on cut/paste events (now supported in all major browsers)\n                    this._handleClipboardEvent = function() {\n                        // hack because \"paste\" event is fired before input is updated\n                        setTimeout(_this6._handleKeyupEvent);\n                    };\n                    this.telInput.addEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.addEventListener(\"paste\", this._handleClipboardEvent);\n                }\n            }, {\n                key: \"_cap\",\n                value: function _cap(number) {\n                    var max = this.telInput.getAttribute(\"maxlength\");\n                    return max && number.length > max ? number.substr(0, max) : number;\n                }\n            }, {\n                key: \"_initBlurListeners\",\n                value: function _initBlurListeners() {\n                    var _this7 = this;\n                    // on blur or form submit: if just a dial code then remove it\n                    this._handleSubmitOrBlurEvent = function() {\n                        _this7._removeEmptyDialCode();\n                    };\n                    if (this.telInput.form) {\n                        this.telInput.form.addEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                    }\n                    this.telInput.addEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                }\n            }, {\n                key: \"_removeEmptyDialCode\",\n                value: function _removeEmptyDialCode() {\n                    if (this.telInput.value.charAt(0) === \"+\") {\n                        var numeric = this._getNumeric(this.telInput.value);\n                        // if just a plus, or if just a dial code\n                        if (!numeric || this.selectedCountryData.dialCode === numeric) {\n                            this.telInput.value = \"\";\n                        }\n                    }\n                }\n            }, {\n                key: \"_getNumeric\",\n                value: function _getNumeric(s) {\n                    return s.replace(/\\D/g, \"\");\n                }\n            }, {\n                key: \"_trigger\",\n                value: function _trigger(name) {\n                    // have to use old school document.createEvent as IE11 doesn't support `new Event()` syntax\n                    var e = document.createEvent(\"Event\");\n                    e.initEvent(name, true, true);\n                    // can bubble, and is cancellable\n                    this.telInput.dispatchEvent(e);\n                }\n            }, {\n                key: \"_showDropdown\",\n                value: function _showDropdown() {\n                    this.countryList.classList.remove(\"iti__hide\");\n                    this.selectedFlag.setAttribute(\"aria-expanded\", \"true\");\n                    this._setDropdownPosition();\n                    // update highlighting and scroll to active list item\n                    if (this.activeItem) {\n                        this._highlightListItem(this.activeItem, false);\n                        this._scrollTo(this.activeItem, true);\n                    }\n                    // bind all the dropdown-related listeners: mouseover, click, click-off, keydown\n                    this._bindDropdownListeners();\n                    // update the arrow\n                    this.dropdownArrow.classList.add(\"iti__arrow--up\");\n                    this._trigger(\"open:countrydropdown\");\n                }\n            }, {\n                key: \"_toggleClass\",\n                value: function _toggleClass(el, className, shouldHaveClass) {\n                    if (shouldHaveClass && !el.classList.contains(className)) {\n                        el.classList.add(className);\n                    } else if (!shouldHaveClass && el.classList.contains(className)) {\n                        el.classList.remove(className);\n                    }\n                }\n            }, {\n                key: \"_setDropdownPosition\",\n                value: function _setDropdownPosition() {\n                    var _this8 = this;\n                    if (this.options.dropdownContainer) {\n                        this.options.dropdownContainer.appendChild(this.dropdown);\n                    }\n                    if (!this.isMobile) {\n                        var pos = this.telInput.getBoundingClientRect();\n                        // windowTop from https://stackoverflow.com/a/14384091/217866\n                        var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                        var inputTop = pos.top + windowTop;\n                        var dropdownHeight = this.countryList.offsetHeight;\n                        // dropdownFitsBelow = (dropdownBottom < windowBottom)\n                        var dropdownFitsBelow = inputTop + this.telInput.offsetHeight + dropdownHeight < windowTop + window.innerHeight;\n                        var dropdownFitsAbove = inputTop - dropdownHeight > windowTop;\n                        // by default, the dropdown will be below the input. If we want to position it above the\n                        // input, we add the dropup class.\n                        this._toggleClass(this.countryList, \"iti__country-list--dropup\", !dropdownFitsBelow && dropdownFitsAbove);\n                        // if dropdownContainer is enabled, calculate postion\n                        if (this.options.dropdownContainer) {\n                            // by default the dropdown will be directly over the input because it's not in the flow.\n                            // If we want to position it below, we need to add some extra top value.\n                            var extraTop = !dropdownFitsBelow && dropdownFitsAbove ? 0 : this.telInput.offsetHeight;\n                            // calculate placement\n                            this.dropdown.style.top = \"\".concat(inputTop + extraTop, \"px\");\n                            this.dropdown.style.left = \"\".concat(pos.left + document.body.scrollLeft, \"px\");\n                            // close menu on window scroll\n                            this._handleWindowScroll = function() {\n                                return _this8._closeDropdown();\n                            };\n                            window.addEventListener(\"scroll\", this._handleWindowScroll);\n                        }\n                    }\n                }\n            }, {\n                key: \"_getClosestListItem\",\n                value: function _getClosestListItem(target) {\n                    var el = target;\n                    while (el && el !== this.countryList && !el.classList.contains(\"iti__country\")) {\n                        el = el.parentNode;\n                    }\n                    // if we reached the countryList element, then return null\n                    return el === this.countryList ? null : el;\n                }\n            }, {\n                key: \"_bindDropdownListeners\",\n                value: function _bindDropdownListeners() {\n                    var _this9 = this;\n                    // when mouse over a list item, just highlight that one\n                    // we add the class \"highlight\", so if they hit \"enter\" we know which one to select\n                    this._handleMouseoverCountryList = function(e) {\n                        // handle event delegation, as we're listening for this event on the countryList\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) {\n                            _this9._highlightListItem(listItem, false);\n                        }\n                    };\n                    this.countryList.addEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    // listen for country selection\n                    this._handleClickCountryList = function(e) {\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) {\n                            _this9._selectListItem(listItem);\n                        }\n                    };\n                    this.countryList.addEventListener(\"click\", this._handleClickCountryList);\n                    // click off to close\n                    // (except when this initial opening click is bubbling up)\n                    // we cannot just stopPropagation as it may be needed to close another instance\n                    var isOpening = true;\n                    this._handleClickOffToClose = function() {\n                        if (!isOpening) {\n                            _this9._closeDropdown();\n                        }\n                        isOpening = false;\n                    };\n                    document.documentElement.addEventListener(\"click\", this._handleClickOffToClose);\n                    // listen for up/down scrolling, enter to select, or letters to jump to country name.\n                    // use keydown as keypress doesn't fire for non-char keys and we want to catch if they\n                    // just hit down and hold it to scroll down (no keyup event).\n                    // listen on the document because that's where key events are triggered if no input has focus\n                    var query = \"\";\n                    var queryTimer = null;\n                    this._handleKeydownOnDropdown = function(e) {\n                        // prevent down key from scrolling the whole page,\n                        // and enter key from submitting a form etc\n                        e.preventDefault();\n                        // up and down to navigate\n                        if (e.key === \"ArrowUp\" || e.key === \"Up\" || e.key === \"ArrowDown\" || e.key === \"Down\") {\n                            _this9._handleUpDownKey(e.key);\n                        } else if (e.key === \"Enter\") {\n                            _this9._handleEnterKey();\n                        } else if (e.key === \"Escape\") {\n                            _this9._closeDropdown();\n                        } else if (/^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(e.key)) {\n                            // jump to countries that start with the query string\n                            if (queryTimer) {\n                                clearTimeout(queryTimer);\n                            }\n                            query += e.key.toLowerCase();\n                            _this9._searchForCountry(query);\n                            // if the timer hits 1 second, reset the query\n                            queryTimer = setTimeout(function() {\n                                query = \"\";\n                            }, 1e3);\n                        }\n                    };\n                    document.addEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                }\n            }, {\n                key: \"_handleUpDownKey\",\n                value: function _handleUpDownKey(key) {\n                    var next = key === \"ArrowUp\" || key === \"Up\" ? this.highlightedItem.previousElementSibling : this.highlightedItem.nextElementSibling;\n                    if (next) {\n                        // skip the divider\n                        if (next.classList.contains(\"iti__divider\")) {\n                            next = key === \"ArrowUp\" || key === \"Up\" ? next.previousElementSibling : next.nextElementSibling;\n                        }\n                        this._highlightListItem(next, true);\n                    }\n                }\n            }, {\n                key: \"_handleEnterKey\",\n                value: function _handleEnterKey() {\n                    if (this.highlightedItem) {\n                        this._selectListItem(this.highlightedItem);\n                    }\n                }\n            }, {\n                key: \"_searchForCountry\",\n                value: function _searchForCountry(query) {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        if (this._startsWith(this.countries[i].name, query)) {\n                            var listItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(this.countries[i].iso2));\n                            // update highlighting and scroll\n                            this._highlightListItem(listItem, false);\n                            this._scrollTo(listItem, true);\n                            break;\n                        }\n                    }\n                }\n            }, {\n                key: \"_startsWith\",\n                value: function _startsWith(a, b) {\n                    return a.substr(0, b.length).toLowerCase() === b;\n                }\n            }, {\n                key: \"_updateValFromNumber\",\n                value: function _updateValFromNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.formatOnDisplay && window.intlTelInputUtils && this.selectedCountryData) {\n                        var useNational = this.options.nationalMode || number.charAt(0) !== \"+\" && !this.options.separateDialCode;\n                        var _intlTelInputUtils$nu = intlTelInputUtils.numberFormat, NATIONAL = _intlTelInputUtils$nu.NATIONAL, INTERNATIONAL = _intlTelInputUtils$nu.INTERNATIONAL;\n                        var format = useNational ? NATIONAL : INTERNATIONAL;\n                        number = intlTelInputUtils.formatNumber(number, this.selectedCountryData.iso2, format);\n                    }\n                    number = this._beforeSetNumber(number);\n                    this.telInput.value = number;\n                }\n            }, {\n                key: \"_updateFlagFromNumber\",\n                value: function _updateFlagFromNumber(originalNumber) {\n                    // if we already have US/Canada selected, make sure the number starts\n                    // with a +1 so _getDialCode will be able to extract the area code\n                    // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag\n                    // from the number), that means we're initialising the plugin with a number that already has a\n                    // dial code, so fine to ignore this bit\n                    var number = originalNumber;\n                    var selectedDialCode = this.selectedCountryData.dialCode;\n                    var isNanp = selectedDialCode === \"1\";\n                    if (number && isNanp && number.charAt(0) !== \"+\") {\n                        if (number.charAt(0) !== \"1\") {\n                            number = \"1\".concat(number);\n                        }\n                        number = \"+\".concat(number);\n                    }\n                    // if separateDialCode enabled, then consider the selected dial code to be part of the number\n                    if (this.options.separateDialCode && selectedDialCode && number.charAt(0) !== \"+\") {\n                        number = \"+\".concat(selectedDialCode).concat(number);\n                    }\n                    // try and extract valid dial code from input\n                    var dialCode = this._getDialCode(number, true);\n                    var numeric = this._getNumeric(number);\n                    var countryCode = null;\n                    if (dialCode) {\n                        var countryCodes = this.countryCodes[this._getNumeric(dialCode)];\n                        // check if the right country is already selected. this should be false if the number is\n                        // longer than the matched dial code because in this case we need to make sure that if\n                        // there are multiple country matches, that the first one is selected (note: we could\n                        // just check that here, but it requires the same loop that we already have later)\n                        var alreadySelected = countryCodes.indexOf(this.selectedCountryData.iso2) !== -1 && numeric.length <= dialCode.length - 1;\n                        var isRegionlessNanpNumber = selectedDialCode === \"1\" && this._isRegionlessNanp(numeric);\n                        // only update the flag if:\n                        // A) NOT (we currently have a NANP flag selected, and the number is a regionlessNanp)\n                        // AND\n                        // B) the right country is not already selected\n                        if (!isRegionlessNanpNumber && !alreadySelected) {\n                            // if using onlyCountries option, countryCodes[0] may be empty, so we must find the first\n                            // non-empty index\n                            for (var j = 0; j < countryCodes.length; j++) {\n                                if (countryCodes[j]) {\n                                    countryCode = countryCodes[j];\n                                    break;\n                                }\n                            }\n                        }\n                    } else if (number.charAt(0) === \"+\" && numeric.length) {\n                        // invalid dial code, so empty\n                        // Note: use getNumeric here because the number has not been formatted yet, so could contain\n                        // bad chars\n                        countryCode = \"\";\n                    } else if (!number || number === \"+\") {\n                        // empty, or just a plus, so default\n                        countryCode = this.defaultCountry;\n                    }\n                    if (countryCode !== null) {\n                        return this._setFlag(countryCode);\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_isRegionlessNanp\",\n                value: function _isRegionlessNanp(number) {\n                    var numeric = this._getNumeric(number);\n                    if (numeric.charAt(0) === \"1\") {\n                        var areaCode = numeric.substr(1, 3);\n                        return regionlessNanpNumbers.indexOf(areaCode) !== -1;\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_highlightListItem\",\n                value: function _highlightListItem(listItem, shouldFocus) {\n                    var prevItem = this.highlightedItem;\n                    if (prevItem) {\n                        prevItem.classList.remove(\"iti__highlight\");\n                    }\n                    this.highlightedItem = listItem;\n                    this.highlightedItem.classList.add(\"iti__highlight\");\n                    this.selectedFlag.setAttribute(\"aria-activedescendant\", listItem.getAttribute(\"id\"));\n                    if (shouldFocus) {\n                        this.highlightedItem.focus();\n                    }\n                }\n            }, {\n                key: \"_getCountryData\",\n                value: function _getCountryData(countryCode, ignoreOnlyCountriesOption, allowFail) {\n                    var countryList = ignoreOnlyCountriesOption ? allCountries : this.countries;\n                    for (var i = 0; i < countryList.length; i++) {\n                        if (countryList[i].iso2 === countryCode) {\n                            return countryList[i];\n                        }\n                    }\n                    if (allowFail) {\n                        return null;\n                    }\n                    throw new Error(\"No country data for '\".concat(countryCode, \"'\"));\n                }\n            }, {\n                key: \"_setFlag\",\n                value: function _setFlag(countryCode) {\n                    var _this$options3 = this.options, allowDropdown = _this$options3.allowDropdown, separateDialCode = _this$options3.separateDialCode, showFlags = _this$options3.showFlags;\n                    var prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};\n                    // do this first as it will throw an error and stop if countryCode is invalid\n                    this.selectedCountryData = countryCode ? this._getCountryData(countryCode, false, false) : {};\n                    // update the defaultCountry - we only need the iso2 from now on, so just store that\n                    if (this.selectedCountryData.iso2) {\n                        this.defaultCountry = this.selectedCountryData.iso2;\n                    }\n                    if (showFlags) {\n                        this.selectedFlagInner.setAttribute(\"class\", \"iti__flag iti__\".concat(countryCode));\n                    }\n                    this._setSelectedCountryFlagTitleAttribute(countryCode, separateDialCode);\n                    if (separateDialCode) {\n                        var dialCode = this.selectedCountryData.dialCode ? \"+\".concat(this.selectedCountryData.dialCode) : \"\";\n                        this.selectedDialCode.innerHTML = dialCode;\n                        // offsetWidth is zero if input is in a hidden container during initialisation\n                        var selectedFlagWidth = this.selectedFlag.offsetWidth || this._getHiddenSelectedFlagWidth();\n                        // add 6px of padding after the grey selected-dial-code box, as this is what we use in the css\n                        if (this.isRTL) {\n                            this.telInput.style.paddingRight = \"\".concat(selectedFlagWidth + 6, \"px\");\n                        } else {\n                            this.telInput.style.paddingLeft = \"\".concat(selectedFlagWidth + 6, \"px\");\n                        }\n                    }\n                    // and the input's placeholder\n                    this._updatePlaceholder();\n                    // update the active list item\n                    if (allowDropdown) {\n                        var prevItem = this.activeItem;\n                        if (prevItem) {\n                            prevItem.classList.remove(\"iti__active\");\n                            prevItem.setAttribute(\"aria-selected\", \"false\");\n                        }\n                        if (countryCode) {\n                            // check if there is a preferred item first, else fall back to standard\n                            var nextItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode, \"-preferred\")) || this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode));\n                            nextItem.setAttribute(\"aria-selected\", \"true\");\n                            nextItem.classList.add(\"iti__active\");\n                            this.activeItem = nextItem;\n                        }\n                    }\n                    // return if the flag has changed or not\n                    return prevCountry.iso2 !== countryCode;\n                }\n            }, {\n                key: \"_setSelectedCountryFlagTitleAttribute\",\n                value: function _setSelectedCountryFlagTitleAttribute(countryCode, separateDialCode) {\n                    if (!this.selectedFlag) {\n                        return;\n                    }\n                    var title;\n                    if (countryCode && !separateDialCode) {\n                        title = \"\".concat(this.selectedCountryData.name, \": +\").concat(this.selectedCountryData.dialCode);\n                    } else if (countryCode) {\n                        // For screen reader output, we don't want to include the dial code in the reader output twice\n                        // so just use the selected country name here:\n                        title = this.selectedCountryData.name;\n                    } else {\n                        title = \"Unknown\";\n                    }\n                    this.selectedFlag.setAttribute(\"title\", title);\n                }\n            }, {\n                key: \"_getHiddenSelectedFlagWidth\",\n                value: function _getHiddenSelectedFlagWidth() {\n                    // to get the right styling to apply, all we need is a shallow clone of the container,\n                    // and then to inject a deep clone of the selectedFlag element\n                    var containerClone = this.telInput.parentNode.cloneNode();\n                    containerClone.style.visibility = \"hidden\";\n                    document.body.appendChild(containerClone);\n                    var flagsContainerClone = this.flagsContainer.cloneNode();\n                    containerClone.appendChild(flagsContainerClone);\n                    var selectedFlagClone = this.selectedFlag.cloneNode(true);\n                    flagsContainerClone.appendChild(selectedFlagClone);\n                    var width = selectedFlagClone.offsetWidth;\n                    containerClone.parentNode.removeChild(containerClone);\n                    return width;\n                }\n            }, {\n                key: \"_updatePlaceholder\",\n                value: function _updatePlaceholder() {\n                    var shouldSetPlaceholder = this.options.autoPlaceholder === \"aggressive\" || !this.hadInitialPlaceholder && this.options.autoPlaceholder === \"polite\";\n                    if (window.intlTelInputUtils && shouldSetPlaceholder) {\n                        var numberType = intlTelInputUtils.numberType[this.options.placeholderNumberType];\n                        var placeholder = this.selectedCountryData.iso2 ? intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, this.options.nationalMode, numberType) : \"\";\n                        placeholder = this._beforeSetNumber(placeholder);\n                        if (typeof this.options.customPlaceholder === \"function\") {\n                            placeholder = this.options.customPlaceholder(placeholder, this.selectedCountryData);\n                        }\n                        this.telInput.setAttribute(\"placeholder\", placeholder);\n                    }\n                }\n            }, {\n                key: \"_selectListItem\",\n                value: function _selectListItem(listItem) {\n                    // update selected flag and active list item\n                    var flagChanged = this._setFlag(listItem.getAttribute(\"data-country-code\"));\n                    this._closeDropdown();\n                    this._updateDialCode(listItem.getAttribute(\"data-dial-code\"));\n                    // focus the input\n                    this.telInput.focus();\n                    // put cursor at end - this fix is required for FF and IE11 (with auto inserting dial code),\n                    // who try to put the cursor at the beginning the first time\n                    var len = this.telInput.value.length;\n                    this.telInput.setSelectionRange(len, len);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"_closeDropdown\",\n                value: function _closeDropdown() {\n                    this.countryList.classList.add(\"iti__hide\");\n                    this.selectedFlag.setAttribute(\"aria-expanded\", \"false\");\n                    this.selectedFlag.removeAttribute(\"aria-activedescendant\");\n                    // update the arrow\n                    this.dropdownArrow.classList.remove(\"iti__arrow--up\");\n                    // unbind key events\n                    document.removeEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                    document.documentElement.removeEventListener(\"click\", this._handleClickOffToClose);\n                    this.countryList.removeEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    this.countryList.removeEventListener(\"click\", this._handleClickCountryList);\n                    // remove menu from container\n                    if (this.options.dropdownContainer) {\n                        if (!this.isMobile) {\n                            window.removeEventListener(\"scroll\", this._handleWindowScroll);\n                        }\n                        if (this.dropdown.parentNode) {\n                            this.dropdown.parentNode.removeChild(this.dropdown);\n                        }\n                    }\n                    this._trigger(\"close:countrydropdown\");\n                }\n            }, {\n                key: \"_scrollTo\",\n                value: function _scrollTo(element, middle) {\n                    var container = this.countryList;\n                    // windowTop from https://stackoverflow.com/a/14384091/217866\n                    var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                    var containerHeight = container.offsetHeight;\n                    var containerTop = container.getBoundingClientRect().top + windowTop;\n                    var containerBottom = containerTop + containerHeight;\n                    var elementHeight = element.offsetHeight;\n                    var elementTop = element.getBoundingClientRect().top + windowTop;\n                    var elementBottom = elementTop + elementHeight;\n                    var newScrollTop = elementTop - containerTop + container.scrollTop;\n                    var middleOffset = containerHeight / 2 - elementHeight / 2;\n                    if (elementTop < containerTop) {\n                        // scroll up\n                        if (middle) {\n                            newScrollTop -= middleOffset;\n                        }\n                        container.scrollTop = newScrollTop;\n                    } else if (elementBottom > containerBottom) {\n                        // scroll down\n                        if (middle) {\n                            newScrollTop += middleOffset;\n                        }\n                        var heightDifference = containerHeight - elementHeight;\n                        container.scrollTop = newScrollTop - heightDifference;\n                    }\n                }\n            }, {\n                key: \"_updateDialCode\",\n                value: function _updateDialCode(newDialCodeBare) {\n                    var inputVal = this.telInput.value;\n                    // save having to pass this every time\n                    var newDialCode = \"+\".concat(newDialCodeBare);\n                    var newNumber;\n                    if (inputVal.charAt(0) === \"+\") {\n                        // there's a plus so we're dealing with a replacement\n                        var prevDialCode = this._getDialCode(inputVal);\n                        if (prevDialCode) {\n                            // current number contains a valid dial code, so replace it\n                            newNumber = inputVal.replace(prevDialCode, newDialCode);\n                        } else {\n                            // current number contains an invalid dial code, so ditch it\n                            // (no way to determine where the invalid dial code ends and the rest of the number begins)\n                            newNumber = newDialCode;\n                        }\n                        this.telInput.value = newNumber;\n                    } else if (this.options.autoInsertDialCode) {\n                        if (inputVal) {\n                            // there is an existing value with no dial code: prefix the new dial code\n                            newNumber = newDialCode + inputVal;\n                        } else {\n                            newNumber = newDialCode;\n                        }\n                        this.telInput.value = newNumber;\n                    }\n                }\n            }, {\n                key: \"_getDialCode\",\n                value: function _getDialCode(number, includeAreaCode) {\n                    var dialCode = \"\";\n                    // only interested in international numbers (starting with a plus)\n                    if (number.charAt(0) === \"+\") {\n                        var numericChars = \"\";\n                        // iterate over chars\n                        for (var i = 0; i < number.length; i++) {\n                            var c = number.charAt(i);\n                            // if char is number (https://stackoverflow.com/a/8935649/217866)\n                            if (!isNaN(parseInt(c, 10))) {\n                                numericChars += c;\n                                // if current numericChars make a valid dial code\n                                if (includeAreaCode) {\n                                    if (this.countryCodes[numericChars]) {\n                                        // store the actual raw string (useful for matching later)\n                                        dialCode = number.substr(0, i + 1);\n                                    }\n                                } else {\n                                    if (this.dialCodes[numericChars]) {\n                                        dialCode = number.substr(0, i + 1);\n                                        // if we're just looking for a dial code, we can break as soon as we find one\n                                        break;\n                                    }\n                                }\n                                // stop searching as soon as we can - in this case when we hit max len\n                                if (numericChars.length === this.countryCodeMaxLen) {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    return dialCode;\n                }\n            }, {\n                key: \"_getFullNumber\",\n                value: function _getFullNumber() {\n                    var val = this.telInput.value.trim();\n                    var dialCode = this.selectedCountryData.dialCode;\n                    var prefix;\n                    var numericVal = this._getNumeric(val);\n                    if (this.options.separateDialCode && val.charAt(0) !== \"+\" && dialCode && numericVal) {\n                        // when using separateDialCode, it is visible so is effectively part of the typed number\n                        prefix = \"+\".concat(dialCode);\n                    } else {\n                        prefix = \"\";\n                    }\n                    return prefix + val;\n                }\n            }, {\n                key: \"_beforeSetNumber\",\n                value: function _beforeSetNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.separateDialCode) {\n                        var dialCode = this._getDialCode(number);\n                        // if there is a valid dial code\n                        if (dialCode) {\n                            // in case _getDialCode returned an area code as well\n                            dialCode = \"+\".concat(this.selectedCountryData.dialCode);\n                            // a lot of numbers will have a space separating the dial code and the main number, and\n                            // some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get\n                            // rid of it\n                            // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc\n                            var start = number[dialCode.length] === \" \" || number[dialCode.length] === \"-\" ? dialCode.length + 1 : dialCode.length;\n                            number = number.substr(start);\n                        }\n                    }\n                    return this._cap(number);\n                }\n            }, {\n                key: \"_triggerCountryChange\",\n                value: function _triggerCountryChange() {\n                    this._trigger(\"countrychange\");\n                }\n            }, {\n                key: \"handleAutoCountry\",\n                value: function handleAutoCountry() {\n                    if (this.options.initialCountry === \"auto\") {\n                        // we must set this even if there is an initial val in the input: in case the initial val is\n                        // invalid and they delete it - they should see their auto country\n                        this.defaultCountry = window.intlTelInputGlobals.autoCountry;\n                        // if there's no initial value in the input, then update the flag\n                        if (!this.telInput.value) {\n                            this.setCountry(this.defaultCountry);\n                        }\n                        this.resolveAutoCountryPromise();\n                    }\n                }\n            }, {\n                key: \"handleUtils\",\n                value: function handleUtils() {\n                    // if the request was successful\n                    if (window.intlTelInputUtils) {\n                        // if there's an initial value in the input, then format it\n                        if (this.telInput.value) {\n                            this._updateValFromNumber(this.telInput.value);\n                        }\n                        this._updatePlaceholder();\n                    }\n                    this.resolveUtilsScriptPromise();\n                }\n            }, {\n                key: \"destroy\",\n                value: function destroy() {\n                    var form = this.telInput.form;\n                    if (this.options.allowDropdown) {\n                        // make sure the dropdown is closed (and unbind listeners)\n                        this._closeDropdown();\n                        this.selectedFlag.removeEventListener(\"click\", this._handleClickSelectedFlag);\n                        this.flagsContainer.removeEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                        // label click hack\n                        var label = this._getClosestLabel();\n                        if (label) {\n                            label.removeEventListener(\"click\", this._handleLabelClick);\n                        }\n                    }\n                    // unbind hiddenInput listeners\n                    if (this.hiddenInput && form) {\n                        form.removeEventListener(\"submit\", this._handleHiddenInputSubmit);\n                    }\n                    // unbind autoInsertDialCode listeners\n                    if (this.options.autoInsertDialCode) {\n                        if (form) {\n                            form.removeEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                        }\n                        this.telInput.removeEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                    }\n                    // unbind key events, and cut/paste events\n                    this.telInput.removeEventListener(\"keyup\", this._handleKeyupEvent);\n                    this.telInput.removeEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.removeEventListener(\"paste\", this._handleClipboardEvent);\n                    // remove attribute of id instance: data-intl-tel-input-id\n                    this.telInput.removeAttribute(\"data-intl-tel-input-id\");\n                    // remove markup (but leave the original input)\n                    var wrapper = this.telInput.parentNode;\n                    wrapper.parentNode.insertBefore(this.telInput, wrapper);\n                    wrapper.parentNode.removeChild(wrapper);\n                    delete window.intlTelInputGlobals.instances[this.id];\n                }\n            }, {\n                key: \"getExtension\",\n                value: function getExtension() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumber\",\n                value: function getNumber(format) {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.formatNumber(this._getFullNumber(), iso2, format);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumberType\",\n                value: function getNumberType() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"getSelectedCountryData\",\n                value: function getSelectedCountryData() {\n                    return this.selectedCountryData;\n                }\n            }, {\n                key: \"getValidationError\",\n                value: function getValidationError() {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.getValidationError(this._getFullNumber(), iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"isValidNumber\",\n                value: function isValidNumber() {\n                    var val = this._getFullNumber().trim();\n                    return window.intlTelInputUtils ? intlTelInputUtils.isValidNumber(val, this.selectedCountryData.iso2) : null;\n                }\n            }, {\n                key: \"isPossibleNumber\",\n                value: function isPossibleNumber() {\n                    var val = this._getFullNumber().trim();\n                    return window.intlTelInputUtils ? intlTelInputUtils.isPossibleNumber(val, this.selectedCountryData.iso2) : null;\n                }\n            }, {\n                key: \"setCountry\",\n                value: function setCountry(originalCountryCode) {\n                    var countryCode = originalCountryCode.toLowerCase();\n                    // check if already selected\n                    if (this.selectedCountryData.iso2 !== countryCode) {\n                        this._setFlag(countryCode);\n                        this._updateDialCode(this.selectedCountryData.dialCode);\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setNumber\",\n                value: function setNumber(number) {\n                    // we must update the flag first, which updates this.selectedCountryData, which is used for\n                    // formatting the number before displaying it\n                    var flagChanged = this._updateFlagFromNumber(number);\n                    this._updateValFromNumber(number);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setPlaceholderNumberType\",\n                value: function setPlaceholderNumberType(type) {\n                    this.options.placeholderNumberType = type;\n                    this._updatePlaceholder();\n                }\n            } ]);\n            return Iti;\n        }();\n        /********************\n *  STATIC METHODS\n ********************/\n        // get the country data object\n        intlTelInputGlobals.getCountryData = function() {\n            return allCountries;\n        };\n        // inject a <script> element to load utils.js\n        var injectScript = function injectScript(path, handleSuccess, handleFailure) {\n            // inject a new script element into the page\n            var script = document.createElement(\"script\");\n            script.onload = function() {\n                forEachInstance(\"handleUtils\");\n                if (handleSuccess) {\n                    handleSuccess();\n                }\n            };\n            script.onerror = function() {\n                forEachInstance(\"rejectUtilsScriptPromise\");\n                if (handleFailure) {\n                    handleFailure();\n                }\n            };\n            script.className = \"iti-load-utils\";\n            script.async = true;\n            script.src = path;\n            document.body.appendChild(script);\n        };\n        // load the utils script\n        intlTelInputGlobals.loadUtils = function(path) {\n            // 2 options:\n            // 1) not already started loading (start)\n            // 2) already started loading (do nothing - just wait for the onload callback to fire, which will\n            // trigger handleUtils on all instances, invoking their resolveUtilsScriptPromise functions)\n            if (!window.intlTelInputUtils && !window.intlTelInputGlobals.startedLoadingUtilsScript) {\n                // only do this once\n                window.intlTelInputGlobals.startedLoadingUtilsScript = true;\n                // if we have promises, then return a promise\n                if (typeof Promise !== \"undefined\") {\n                    return new Promise(function(resolve, reject) {\n                        return injectScript(path, resolve, reject);\n                    });\n                }\n                injectScript(path);\n            }\n            return null;\n        };\n        // default options\n        intlTelInputGlobals.defaults = defaults;\n        // version\n        intlTelInputGlobals.version = \"18.2.1\";\n        // convenience wrapper\n        return function(input, options) {\n            var iti = new Iti(input, options);\n            iti._init();\n            input.setAttribute(\"data-intl-tel-input-id\", iti.id);\n            window.intlTelInputGlobals.instances[iti.id] = iti;\n            return iti;\n        };\n    }();\n});\n/*\n * International Telephone Input v18.2.1\n * https://github.com/jackocnr/intl-tel-input.git\n * Licensed under the MIT license\n */\n\n// wrap in UMD\n(function() {\n    // Array of country objects for the flag dropdown.\n    // Here is the criteria for the plugin to support a given country/territory\n    // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n    // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes\n    // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png\n    // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml\n    // Each country array has the following information:\n    // [\n    //    Country name,\n    //    iso2 code,\n    //    International dial code,\n    //    Order (if >1 country with same dial code),\n    //    Area codes\n    // ]\n    var allCountries = [ [ \"Afghanistan (‫افغانستان‬‎)\", \"af\", \"93\" ], [ \"Albania (Shqipëri)\", \"al\", \"355\" ], [ \"Algeria (‫الجزائر‬‎)\", \"dz\", \"213\" ], [ \"American Samoa\", \"as\", \"1\", 5, [ \"684\" ] ], [ \"Andorra\", \"ad\", \"376\" ], [ \"Angola\", \"ao\", \"244\" ], [ \"Anguilla\", \"ai\", \"1\", 6, [ \"264\" ] ], [ \"Antigua and Barbuda\", \"ag\", \"1\", 7, [ \"268\" ] ], [ \"Argentina\", \"ar\", \"54\" ], [ \"Armenia (Հայաստան)\", \"am\", \"374\" ], [ \"Aruba\", \"aw\", \"297\" ], [ \"Ascension Island\", \"ac\", \"247\" ], [ \"Australia\", \"au\", \"61\", 0 ], [ \"Austria (Österreich)\", \"at\", \"43\" ], [ \"Azerbaijan (Azərbaycan)\", \"az\", \"994\" ], [ \"Bahamas\", \"bs\", \"1\", 8, [ \"242\" ] ], [ \"Bahrain (‫البحرين‬‎)\", \"bh\", \"973\" ], [ \"Bangladesh (বাংলাদেশ)\", \"bd\", \"880\" ], [ \"Barbados\", \"bb\", \"1\", 9, [ \"246\" ] ], [ \"Belarus (Беларусь)\", \"by\", \"375\" ], [ \"Belgium (België)\", \"be\", \"32\" ], [ \"Belize\", \"bz\", \"501\" ], [ \"Benin (Bénin)\", \"bj\", \"229\" ], [ \"Bermuda\", \"bm\", \"1\", 10, [ \"441\" ] ], [ \"Bhutan (འབྲུག)\", \"bt\", \"975\" ], [ \"Bolivia\", \"bo\", \"591\" ], [ \"Bosnia and Herzegovina (Босна и Херцеговина)\", \"ba\", \"387\" ], [ \"Botswana\", \"bw\", \"267\" ], [ \"Brazil (Brasil)\", \"br\", \"55\" ], [ \"British Indian Ocean Territory\", \"io\", \"246\" ], [ \"British Virgin Islands\", \"vg\", \"1\", 11, [ \"284\" ] ], [ \"Brunei\", \"bn\", \"673\" ], [ \"Bulgaria (България)\", \"bg\", \"359\" ], [ \"Burkina Faso\", \"bf\", \"226\" ], [ \"Burundi (Uburundi)\", \"bi\", \"257\" ], [ \"Cambodia (កម្ពុជា)\", \"kh\", \"855\" ], [ \"Cameroon (Cameroun)\", \"cm\", \"237\" ], [ \"Canada\", \"ca\", \"1\", 1, [ \"204\", \"226\", \"236\", \"249\", \"250\", \"263\", \"289\", \"306\", \"343\", \"354\", \"365\", \"367\", \"368\", \"382\", \"387\", \"403\", \"416\", \"418\", \"428\", \"431\", \"437\", \"438\", \"450\", \"584\", \"468\", \"474\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"584\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"683\", \"705\", \"709\", \"742\", \"753\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"902\", \"905\" ] ], [ \"Cape Verde (Kabu Verdi)\", \"cv\", \"238\" ], [ \"Caribbean Netherlands\", \"bq\", \"599\", 1, [ \"3\", \"4\", \"7\" ] ], [ \"Cayman Islands\", \"ky\", \"1\", 12, [ \"345\" ] ], [ \"Central African Republic (République centrafricaine)\", \"cf\", \"236\" ], [ \"Chad (Tchad)\", \"td\", \"235\" ], [ \"Chile\", \"cl\", \"56\" ], [ \"China (中国)\", \"cn\", \"86\" ], [ \"Christmas Island\", \"cx\", \"61\", 2, [ \"89164\" ] ], [ \"Cocos (Keeling) Islands\", \"cc\", \"61\", 1, [ \"89162\" ] ], [ \"Colombia\", \"co\", \"57\" ], [ \"Comoros (‫جزر القمر‬‎)\", \"km\", \"269\" ], [ \"Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)\", \"cd\", \"243\" ], [ \"Congo (Republic) (Congo-Brazzaville)\", \"cg\", \"242\" ], [ \"Cook Islands\", \"ck\", \"682\" ], [ \"Costa Rica\", \"cr\", \"506\" ], [ \"Côte d’Ivoire\", \"ci\", \"225\" ], [ \"Croatia (Hrvatska)\", \"hr\", \"385\" ], [ \"Cuba\", \"cu\", \"53\" ], [ \"Curaçao\", \"cw\", \"599\", 0 ], [ \"Cyprus (Κύπρος)\", \"cy\", \"357\" ], [ \"Czech Republic (Česká republika)\", \"cz\", \"420\" ], [ \"Denmark (Danmark)\", \"dk\", \"45\" ], [ \"Djibouti\", \"dj\", \"253\" ], [ \"Dominica\", \"dm\", \"1\", 13, [ \"767\" ] ], [ \"Dominican Republic (República Dominicana)\", \"do\", \"1\", 2, [ \"809\", \"829\", \"849\" ] ], [ \"Ecuador\", \"ec\", \"593\" ], [ \"Egypt (‫مصر‬‎)\", \"eg\", \"20\" ], [ \"El Salvador\", \"sv\", \"503\" ], [ \"Equatorial Guinea (Guinea Ecuatorial)\", \"gq\", \"240\" ], [ \"Eritrea\", \"er\", \"291\" ], [ \"Estonia (Eesti)\", \"ee\", \"372\" ], [ \"Eswatini\", \"sz\", \"268\" ], [ \"Ethiopia\", \"et\", \"251\" ], [ \"Falkland Islands (Islas Malvinas)\", \"fk\", \"500\" ], [ \"Faroe Islands (Føroyar)\", \"fo\", \"298\" ], [ \"Fiji\", \"fj\", \"679\" ], [ \"Finland (Suomi)\", \"fi\", \"358\", 0 ], [ \"France\", \"fr\", \"33\" ], [ \"French Guiana (Guyane française)\", \"gf\", \"594\" ], [ \"French Polynesia (Polynésie française)\", \"pf\", \"689\" ], [ \"Gabon\", \"ga\", \"241\" ], [ \"Gambia\", \"gm\", \"220\" ], [ \"Georgia (საქართველო)\", \"ge\", \"995\" ], [ \"Germany (Deutschland)\", \"de\", \"49\" ], [ \"Ghana (Gaana)\", \"gh\", \"233\" ], [ \"Gibraltar\", \"gi\", \"350\" ], [ \"Greece (Ελλάδα)\", \"gr\", \"30\" ], [ \"Greenland (Kalaallit Nunaat)\", \"gl\", \"299\" ], [ \"Grenada\", \"gd\", \"1\", 14, [ \"473\" ] ], [ \"Guadeloupe\", \"gp\", \"590\", 0 ], [ \"Guam\", \"gu\", \"1\", 15, [ \"671\" ] ], [ \"Guatemala\", \"gt\", \"502\" ], [ \"Guernsey\", \"gg\", \"44\", 1, [ \"1481\", \"7781\", \"7839\", \"7911\" ] ], [ \"Guinea (Guinée)\", \"gn\", \"224\" ], [ \"Guinea-Bissau (Guiné Bissau)\", \"gw\", \"245\" ], [ \"Guyana\", \"gy\", \"592\" ], [ \"Haiti\", \"ht\", \"509\" ], [ \"Honduras\", \"hn\", \"504\" ], [ \"Hong Kong (香港)\", \"hk\", \"852\" ], [ \"Hungary (Magyarország)\", \"hu\", \"36\" ], [ \"Iceland (Ísland)\", \"is\", \"354\" ], [ \"India (भारत)\", \"in\", \"91\" ], [ \"Indonesia\", \"id\", \"62\" ], [ \"Iran (‫ایران‬‎)\", \"ir\", \"98\" ], [ \"Iraq (‫العراق‬‎)\", \"iq\", \"964\" ], [ \"Ireland\", \"ie\", \"353\" ], [ \"Isle of Man\", \"im\", \"44\", 2, [ \"1624\", \"74576\", \"7524\", \"7924\", \"7624\" ] ], [ \"Israel (‫ישראל‬‎)\", \"il\", \"972\" ], [ \"Italy (Italia)\", \"it\", \"39\", 0 ], [ \"Jamaica\", \"jm\", \"1\", 4, [ \"876\", \"658\" ] ], [ \"Japan (日本)\", \"jp\", \"81\" ], [ \"Jersey\", \"je\", \"44\", 3, [ \"1534\", \"7509\", \"7700\", \"7797\", \"7829\", \"7937\" ] ], [ \"Jordan (‫الأردن‬‎)\", \"jo\", \"962\" ], [ \"Kazakhstan (Казахстан)\", \"kz\", \"7\", 1, [ \"33\", \"7\" ] ], [ \"Kenya\", \"ke\", \"254\" ], [ \"Kiribati\", \"ki\", \"686\" ], [ \"Kosovo\", \"xk\", \"383\" ], [ \"Kuwait (‫الكويت‬‎)\", \"kw\", \"965\" ], [ \"Kyrgyzstan (Кыргызстан)\", \"kg\", \"996\" ], [ \"Laos (ລາວ)\", \"la\", \"856\" ], [ \"Latvia (Latvija)\", \"lv\", \"371\" ], [ \"Lebanon (‫لبنان‬‎)\", \"lb\", \"961\" ], [ \"Lesotho\", \"ls\", \"266\" ], [ \"Liberia\", \"lr\", \"231\" ], [ \"Libya (‫ليبيا‬‎)\", \"ly\", \"218\" ], [ \"Liechtenstein\", \"li\", \"423\" ], [ \"Lithuania (Lietuva)\", \"lt\", \"370\" ], [ \"Luxembourg\", \"lu\", \"352\" ], [ \"Macau (澳門)\", \"mo\", \"853\" ], [ \"Madagascar (Madagasikara)\", \"mg\", \"261\" ], [ \"Malawi\", \"mw\", \"265\" ], [ \"Malaysia\", \"my\", \"60\" ], [ \"Maldives\", \"mv\", \"960\" ], [ \"Mali\", \"ml\", \"223\" ], [ \"Malta\", \"mt\", \"356\" ], [ \"Marshall Islands\", \"mh\", \"692\" ], [ \"Martinique\", \"mq\", \"596\" ], [ \"Mauritania (‫موريتانيا‬‎)\", \"mr\", \"222\" ], [ \"Mauritius (Moris)\", \"mu\", \"230\" ], [ \"Mayotte\", \"yt\", \"262\", 1, [ \"269\", \"639\" ] ], [ \"Mexico (México)\", \"mx\", \"52\" ], [ \"Micronesia\", \"fm\", \"691\" ], [ \"Moldova (Republica Moldova)\", \"md\", \"373\" ], [ \"Monaco\", \"mc\", \"377\" ], [ \"Mongolia (Монгол)\", \"mn\", \"976\" ], [ \"Montenegro (Crna Gora)\", \"me\", \"382\" ], [ \"Montserrat\", \"ms\", \"1\", 16, [ \"664\" ] ], [ \"Morocco (‫المغرب‬‎)\", \"ma\", \"212\", 0 ], [ \"Mozambique (Moçambique)\", \"mz\", \"258\" ], [ \"Myanmar (Burma) (မြန်မာ)\", \"mm\", \"95\" ], [ \"Namibia (Namibië)\", \"na\", \"264\" ], [ \"Nauru\", \"nr\", \"674\" ], [ \"Nepal (नेपाल)\", \"np\", \"977\" ], [ \"Netherlands (Nederland)\", \"nl\", \"31\" ], [ \"New Caledonia (Nouvelle-Calédonie)\", \"nc\", \"687\" ], [ \"New Zealand\", \"nz\", \"64\" ], [ \"Nicaragua\", \"ni\", \"505\" ], [ \"Niger (Nijar)\", \"ne\", \"227\" ], [ \"Nigeria\", \"ng\", \"234\" ], [ \"Niue\", \"nu\", \"683\" ], [ \"Norfolk Island\", \"nf\", \"672\" ], [ \"North Korea (조선 민주주의 인민 공화국)\", \"kp\", \"850\" ], [ \"North Macedonia (Северна Македонија)\", \"mk\", \"389\" ], [ \"Northern Mariana Islands\", \"mp\", \"1\", 17, [ \"670\" ] ], [ \"Norway (Norge)\", \"no\", \"47\", 0 ], [ \"Oman (‫عُمان‬‎)\", \"om\", \"968\" ], [ \"Pakistan (‫پاکستان‬‎)\", \"pk\", \"92\" ], [ \"Palau\", \"pw\", \"680\" ], [ \"Palestine (‫فلسطين‬‎)\", \"ps\", \"970\" ], [ \"Panama (Panamá)\", \"pa\", \"507\" ], [ \"Papua New Guinea\", \"pg\", \"675\" ], [ \"Paraguay\", \"py\", \"595\" ], [ \"Peru (Perú)\", \"pe\", \"51\" ], [ \"Philippines\", \"ph\", \"63\" ], [ \"Poland (Polska)\", \"pl\", \"48\" ], [ \"Portugal\", \"pt\", \"351\" ], [ \"Puerto Rico\", \"pr\", \"1\", 3, [ \"787\", \"939\" ] ], [ \"Qatar (‫قطر‬‎)\", \"qa\", \"974\" ], [ \"Réunion (La Réunion)\", \"re\", \"262\", 0 ], [ \"Romania (România)\", \"ro\", \"40\" ], [ \"Russia (Россия)\", \"ru\", \"7\", 0 ], [ \"Rwanda\", \"rw\", \"250\" ], [ \"Saint Barthélemy\", \"bl\", \"590\", 1 ], [ \"Saint Helena\", \"sh\", \"290\" ], [ \"Saint Kitts and Nevis\", \"kn\", \"1\", 18, [ \"869\" ] ], [ \"Saint Lucia\", \"lc\", \"1\", 19, [ \"758\" ] ], [ \"Saint Martin (Saint-Martin (partie française))\", \"mf\", \"590\", 2 ], [ \"Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)\", \"pm\", \"508\" ], [ \"Saint Vincent and the Grenadines\", \"vc\", \"1\", 20, [ \"784\" ] ], [ \"Samoa\", \"ws\", \"685\" ], [ \"San Marino\", \"sm\", \"378\" ], [ \"São Tomé and Príncipe (São Tomé e Príncipe)\", \"st\", \"239\" ], [ \"Saudi Arabia (‫المملكة العربية السعودية‬‎)\", \"sa\", \"966\" ], [ \"Senegal (Sénégal)\", \"sn\", \"221\" ], [ \"Serbia (Србија)\", \"rs\", \"381\" ], [ \"Seychelles\", \"sc\", \"248\" ], [ \"Sierra Leone\", \"sl\", \"232\" ], [ \"Singapore\", \"sg\", \"65\" ], [ \"Sint Maarten\", \"sx\", \"1\", 21, [ \"721\" ] ], [ \"Slovakia (Slovensko)\", \"sk\", \"421\" ], [ \"Slovenia (Slovenija)\", \"si\", \"386\" ], [ \"Solomon Islands\", \"sb\", \"677\" ], [ \"Somalia (Soomaaliya)\", \"so\", \"252\" ], [ \"South Africa\", \"za\", \"27\" ], [ \"South Korea (대한민국)\", \"kr\", \"82\" ], [ \"South Sudan (‫جنوب السودان‬‎)\", \"ss\", \"211\" ], [ \"Spain (España)\", \"es\", \"34\" ], [ \"Sri Lanka (ශ්‍රී ලංකාව)\", \"lk\", \"94\" ], [ \"Sudan (‫السودان‬‎)\", \"sd\", \"249\" ], [ \"Suriname\", \"sr\", \"597\" ], [ \"Svalbard and Jan Mayen\", \"sj\", \"47\", 1, [ \"79\" ] ], [ \"Sweden (Sverige)\", \"se\", \"46\" ], [ \"Switzerland (Schweiz)\", \"ch\", \"41\" ], [ \"Syria (‫سوريا‬‎)\", \"sy\", \"963\" ], [ \"Taiwan (台灣)\", \"tw\", \"886\" ], [ \"Tajikistan\", \"tj\", \"992\" ], [ \"Tanzania\", \"tz\", \"255\" ], [ \"Thailand (ไทย)\", \"th\", \"66\" ], [ \"Timor-Leste\", \"tl\", \"670\" ], [ \"Togo\", \"tg\", \"228\" ], [ \"Tokelau\", \"tk\", \"690\" ], [ \"Tonga\", \"to\", \"676\" ], [ \"Trinidad and Tobago\", \"tt\", \"1\", 22, [ \"868\" ] ], [ \"Tunisia (‫تونس‬‎)\", \"tn\", \"216\" ], [ \"Turkey (Türkiye)\", \"tr\", \"90\" ], [ \"Turkmenistan\", \"tm\", \"993\" ], [ \"Turks and Caicos Islands\", \"tc\", \"1\", 23, [ \"649\" ] ], [ \"Tuvalu\", \"tv\", \"688\" ], [ \"U.S. Virgin Islands\", \"vi\", \"1\", 24, [ \"340\" ] ], [ \"Uganda\", \"ug\", \"256\" ], [ \"Ukraine (Україна)\", \"ua\", \"380\" ], [ \"United Arab Emirates (‫الإمارات العربية المتحدة‬‎)\", \"ae\", \"971\" ], [ \"United Kingdom\", \"gb\", \"44\", 0 ], [ \"United States\", \"us\", \"1\", 0 ], [ \"Uruguay\", \"uy\", \"598\" ], [ \"Uzbekistan (Oʻzbekiston)\", \"uz\", \"998\" ], [ \"Vanuatu\", \"vu\", \"678\" ], [ \"Vatican City (Città del Vaticano)\", \"va\", \"39\", 1, [ \"06698\" ] ], [ \"Venezuela\", \"ve\", \"58\" ], [ \"Vietnam (Việt Nam)\", \"vn\", \"84\" ], [ \"Wallis and Futuna (Wallis-et-Futuna)\", \"wf\", \"681\" ], [ \"Western Sahara (‫الصحراء الغربية‬‎)\", \"eh\", \"212\", 1, [ \"5288\", \"5289\" ] ], [ \"Yemen (‫اليمن‬‎)\", \"ye\", \"967\" ], [ \"Zambia\", \"zm\", \"260\" ], [ \"Zimbabwe\", \"zw\", \"263\" ], [ \"Åland Islands\", \"ax\", \"358\", 1, [ \"18\" ] ] ];\n    // loop over all of the countries above, restructuring the data to be objects with named keys\n    for (var i = 0; i < allCountries.length; i++) {\n        var c = allCountries[i];\n        allCountries[i] = {\n            name: c[0],\n            iso2: c[1],\n            dialCode: c[2],\n            priority: c[3] || 0,\n            areaCodes: c[4] || null\n        };\n    }\n    if (typeof module === \"object\" && module.exports) module.exports = allCountries; else window.allCountries = allCountries;\n})();\n// Based on https://raw.githubusercontent.com/acanimal/jQuery-Plugin-Boilerplate/master/jquery-plugin.js\n;(function($, window, document, undefined) {\n\n    var pluginName = 'phoneinput';\n\n    /**\n     * @param {HTMLElement} element The DOM element where plugin is applied\n     * @param {Object} options Options passed to the constructor\n     */\n    function Plugin(element, options) {\n        this.el = element;\n        this.$el = $(element);\n\n        this.options = $.extend({}, $.fn[pluginName].defaults, options);\n\n        this.init();\n\n        // Update hidden input on changing number or country code.\n        this.$el.on('change countrychange', function () {\n            $(this).phoneinput('sync');\n        });\n    }\n\n    /**\n     * Usage: $('#element').phoneinput('method');\n     */\n    Plugin.prototype = {\n        init: function() {\n            this.instance = window.intlTelInput(this.el, this.options);\n\n            // Add hidden input after which contains the full number with country code.\n            $('<input>').attr('type', 'hidden')\n                .attr('name', this.$el.attr('name').replace('[number]', '[full_number]'))\n                .insertAfter(this.$el);\n\n            // Set value in hidden input.\n            this.sync();\n        },\n\n        destroy: function() {\n            this.$el.removeData();\n        },\n\n        sync: function() {\n            var countryData = this.instance.getSelectedCountryData();\n\n            this.$el.next('input[type=\"hidden\"]')\n                .val('+' + countryData.dialCode + this.$el.val());\n        },\n    };\n\n    $.fn[pluginName] = function(options) {\n        var args = arguments;\n\n        if (options === undefined || typeof options === 'object') {\n            // Creates a new plugin instance, for each selected element, and\n            // stores a reference within the element's data\n            return this.each(function() {\n                if (! $.data(this, 'plugin_' + pluginName)) {\n                    $.data(this, 'plugin_' + pluginName, new Plugin(this, options));\n                }\n            });\n        } else if (typeof options === 'string' && options[0] !== '_' && options !== 'init') {\n            // Call a public plugin method (not starting with an underscore) for each\n            // selected element.\n            if (Array.prototype.slice.call(args, 1).length === 0 && $.inArray(options, $.fn[pluginName].getters) !== -1) {\n                // If the user does not pass any arguments and the method allows to\n                // work as a getter then break the chain so we can return a value\n                // instead the element reference.\n                var instance = $.data(this[0], 'plugin_' + pluginName);\n\n                return instance[options].apply(instance, Array.prototype.slice.call(args, 1));\n            } else {\n                // Invoke the specified method on each selected element\n                return this.each(function() {\n                    var instance = $.data(this, 'plugin_' + pluginName);\n                    if (instance instanceof Plugin && typeof instance[options] === 'function') {\n                        instance[options].apply(instance, Array.prototype.slice.call(args, 1));\n                    }\n                });\n            }\n        }\n    };\n\n    $.fn[pluginName].getters = [];\n\n    $.fn[pluginName].defaults = {\n        autoPlaceholder: 'off',\n        formatOnDisplay: false,\n        initialCountry: $('meta[name=default_country]').prop('content'),\n        preferredCountries: [$('meta[name=default_country]').prop('content')],\n        separateDialCode: true,\n    };\n\n})(jQuery, window, document);\n\n"]}